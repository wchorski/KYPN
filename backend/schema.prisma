// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String     @id @default(uuid()) @postgresql.Uuid
  name                    String     @default("")
  email                   String     @unique @default("")
  password                String
  isAdmin                 Boolean    @default(false)
  posts                   Post[]     @relation("Post_author")
  cart                    CartItem[] @relation("CartItem_user")
  createdAt               DateTime?  @default(now())
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}

model Product {
  id                    String        @id @default(uuid()) @postgresql.Uuid
  photo                 ProductImage? @relation("Product_photo", fields: [photoId], references: [id])
  photoId               String?       @unique @map("photo") @postgresql.Uuid
  name                  String        @default("")
  description           String        @default("")
  status                String?       @default("DRAFT")
  price                 Int?
  from_CartItem_product CartItem[]    @relation("CartItem_product")
}

model ProductImage {
  id              String   @id @default(uuid()) @postgresql.Uuid
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  altText         String   @default("Product Featured Image")
  product         Product? @relation("Product_photo")
}

model CartItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  quantity  Int      @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user") @postgresql.Uuid

  @@index([productId])
  @@index([userId])
}

model Post {
  id          String    @id @default(uuid()) @postgresql.Uuid
  title       String    @default("")
  slug        String    @unique @default("")
  publishDate DateTime? @default(now())
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author") @postgresql.Uuid
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(uuid()) @postgresql.Uuid
  name  String @default("")
  posts Post[] @relation("Post_tags")
}
