// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String             @id @default(uuid()) @postgresql.Uuid
  name                    String             @default("")
  nameLast                String             @default("")
  image                   String             @default("")
  phone                   String             @default("")
  email                   String             @unique @default("")
  password                String
  isAdmin                 Boolean            @default(false)
  isActive                Boolean            @default(true)
  stripeCustomerId        String             @default("")
  posts                   Post[]             @relation("Post_author")
  pages                   Page[]             @relation("Page_author")
  servicesProvided        Service[]          @relation("Service_employees")
  bookings                Booking[]          @relation("Booking_customer")
  gigs                    Booking[]          @relation("Booking_employees")
  eventsHost              Event[]            @relation("Event_hosts")
  eventsCohost            Event[]            @relation("Event_cohosts")
  availability            Availability[]     @relation("Availability_employee")
  buisnessHourOpen        String?            @default("09:00:00")
  buisnessHourClosed      String?            @default("18:00:00")
  cart                    CartItem[]         @relation("CartItem_user")
  createdAt               DateTime?          @default(now())
  products                Product[]          @relation("Product_author")
  subscriptionPlans       SubscriptionPlan[] @relation("SubscriptionPlan_author")
  subscriptions           SubscriptionItem[] @relation("SubscriptionItem_user")
  orders                  Order[]            @relation("Order_user")
  tickets                 Ticket[]           @relation("Ticket_holder")
  role                    Role?              @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?            @map("role") @postgresql.Uuid
  dateCreated             DateTime?          @default(now())
  dateModified            DateTime?          @default(now())
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Announcement {
  id      String    @id @default(uuid()) @postgresql.Uuid
  link    String    @default("")
  start   DateTime?
  end     DateTime?
  type    String?   @default("NORMAL")
  content Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model Role {
  id                         String  @id @default(uuid()) @postgresql.Uuid
  name                       String  @unique @default("")
  canManageProducts          Boolean @default(false)
  canManageAddons            Boolean @default(false)
  canManageBookings          Boolean @default(false)
  canManageAvailability      Boolean @default(false)
  canManageEvents            Boolean @default(false)
  canManageAnnouncements     Boolean @default(false)
  canManageTickets           Boolean @default(false)
  canSeeOtherUsers           Boolean @default(false)
  canManageUsers             Boolean @default(false)
  canManageRoles             Boolean @default(false)
  canManageCart              Boolean @default(false)
  canManageOrders            Boolean @default(false)
  canManageCategories        Boolean @default(false)
  canManageTags              Boolean @default(false)
  canManageLocations         Boolean @default(false)
  canManagePages             Boolean @default(false)
  canManagePosts             Boolean @default(false)
  canManageServices          Boolean @default(false)
  canManageSubscriptionPlans Boolean @default(false)
  canManageSubscriptionItems Boolean @default(false)
  canManageCoupons           Boolean @default(false)
  assignedTo                 User[]  @relation("User_role")
}

model Booking {
  id              String    @id @default(uuid()) @postgresql.Uuid
  start           DateTime
  end             DateTime?
  summary         String    @default("[NEW BOOKING]")
  durationInHours Decimal   @default("23") @postgresql.Decimal(5, 2)
  service         Service?  @relation("Booking_service", fields: [serviceId], references: [id])
  serviceId       String?   @map("service") @postgresql.Uuid
  location        Location? @relation("Booking_location", fields: [locationId], references: [id])
  locationId      String?   @map("location") @postgresql.Uuid
  addons          Addon[]   @relation("Addon_bookings")
  price           Int?      @default(0)
  employees       User[]    @relation("Booking_employees")
  customer        User?     @relation("Booking_customer", fields: [customerId], references: [id])
  customerId      String?   @map("customer") @postgresql.Uuid
  email           String    @default("")
  phone           String    @default("")
  name            String    @default("")
  notes           String    @default("")
  status          String?   @default("LEAD")
  dateCreated     DateTime? @default(now())
  dateModified    DateTime? @default(now())
  google          Json?     @default("{\"id\":\"\",\"status\":\"\",\"kind\":\"\",\"htmlLink\":\"\"}")

  @@index([serviceId])
  @@index([locationId])
  @@index([customerId])
}

model Service {
  id                 String     @id @default(uuid()) @postgresql.Uuid
  name               String     @unique @default("")
  description        String     @default("")
  price              Int?       @default(0)
  addons             Addon[]    @relation("Addon_services")
  durationInHours    Decimal    @default("6") @postgresql.Decimal(5, 2)
  buisnessHourOpen   String?    @default("09:00:00")
  buisnessHourClosed String?    @default("18:00:00")
  buisnessDays       Json       @default("[0,1,2,3,4,5,6]")
  employees          User[]     @relation("Service_employees")
  locations          Location[] @relation("Location_services")
  bookings           Booking[]  @relation("Booking_service")
  categories         Category[] @relation("Category_services")
  tags               Tag[]      @relation("Service_tags")
}

model Location {
  id         String     @id @default(uuid()) @postgresql.Uuid
  name       String     @unique @default("")
  address    String     @unique @default("")
  rooms      Int?       @default(1)
  services   Service[]  @relation("Location_services")
  bookings   Booking[]  @relation("Booking_location")
  events     Event[]    @relation("Event_location")
  categories Category[] @relation("Category_locations")
  tags       Tag[]      @relation("Location_tags")
}

model Addon {
  id                String             @id @default(uuid()) @postgresql.Uuid
  name              String             @unique @default("")
  description       String             @default("")
  price             Int?               @default(0)
  services          Service[]          @relation("Addon_services")
  bookings          Booking[]          @relation("Addon_bookings")
  subscriptionItems SubscriptionItem[] @relation("Addon_subscriptionItems")
  categories        Category[]         @relation("Addon_categories")
  tags              Tag[]              @relation("Addon_tags")
}

model Availability {
  id              String    @id @default(uuid()) @postgresql.Uuid
  start           DateTime
  end             DateTime?
  durationInHours Decimal?  @postgresql.Decimal(5, 2)
  employee        User?     @relation("Availability_employee", fields: [employeeId], references: [id])
  employeeId      String?   @map("employee") @postgresql.Uuid
  type            String?   @default("VACATION")
  status          String?   @default("APPROVED")
  dateCreated     DateTime? @default(now())
  dateModified    DateTime? @default(now())

  @@index([employeeId])
}

model SubscriptionPlan {
  id               String             @id @default(uuid()) @postgresql.Uuid
  photo            ProductImage?      @relation("ProductImage_subscription")
  image            String             @default("")
  author           User?              @relation("SubscriptionPlan_author", fields: [authorId], references: [id])
  authorId         String?            @map("author") @postgresql.Uuid
  name             String             @default("")
  slug             String             @unique @default("")
  excerpt          String             @default("")
  description      Json               @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status           String?            @default("DRAFT")
  price            Int?
  stripeProductId  String             @default("NO_PROD_ID")
  stripePriceId    String             @default("NO_PRICE_ID")
  billing_interval String?            @default("month")
  items            SubscriptionItem[] @relation("SubscriptionItem_subscriptionPlan")
  stockMax         Int                @default(0)
  tags             Tag[]              @relation("SubscriptionPlan_tags")
  categories       Category[]         @relation("Category_subscriptions")

  @@index([authorId])
}

model SubscriptionItem {
  id                 String            @id @default(uuid()) @postgresql.Uuid
  custom_price       Int?
  subscriptionPlan   SubscriptionPlan? @relation("SubscriptionItem_subscriptionPlan", fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?           @map("subscriptionPlan") @postgresql.Uuid
  isActive           Boolean           @default(true)
  isDelinquent       Boolean           @default(false)
  status             String?           @default("ACTIVE")
  billing_interval   String?           @default("month")
  addons             Addon[]           @relation("Addon_subscriptionItems")
  user               User?             @relation("SubscriptionItem_user", fields: [userId], references: [id])
  userId             String?           @map("user") @postgresql.Uuid
  stripeId           String            @default("")
  coupons            Coupon[]          @relation("Coupon_subscriptionItems")
  dateCreated        DateTime?         @default(now())
  dateModified       DateTime?         @default(now())

  @@index([subscriptionPlanId])
  @@index([userId])
}

model Product {
  id                    String        @id @default(uuid()) @postgresql.Uuid
  photo                 ProductImage? @relation("Product_photo", fields: [photoId], references: [id])
  photoId               String?       @unique @map("photo") @postgresql.Uuid
  image                 String        @default("http://localhost:3000/assets/private/placeholder.png")
  name                  String        @default("")
  stripeProductId       String        @default("NO_PROD_ID")
  stripePriceId         String        @default("NO_PRICE_ID")
  slug                  String        @unique @default("")
  excerpt               String        @default("")
  description           Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status                String?       @default("DRAFT")
  price                 Int?
  stockCount            Int           @default(0)
  author                User?         @relation("Product_author", fields: [authorId], references: [id])
  authorId              String?       @map("author") @postgresql.Uuid
  tags                  Tag[]         @relation("Product_tags")
  categories            Category[]    @relation("Category_products")
  dateCreated           DateTime?     @default(now())
  dateModified          DateTime?     @default(now())
  from_CartItem_product CartItem[]    @relation("CartItem_product")

  @@index([authorId])
}

model ProductImage {
  id                   String            @id @default(uuid()) @postgresql.Uuid
  image                Json?
  url                  String            @default("")
  altText              String            @default("Product Featured Image")
  filename             String            @unique @default("")
  product              Product?          @relation("Product_photo")
  subscription         SubscriptionPlan? @relation("ProductImage_subscription", fields: [subscriptionId], references: [id])
  subscriptionId       String?           @unique @map("subscription") @postgresql.Uuid
  from_OrderItem_photo OrderItem[]       @relation("OrderItem_photo")
}

model CartItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  quantity  Int      @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user") @postgresql.Uuid

  @@index([productId])
  @@index([userId])
}

model OrderItem {
  id           String        @id @default(uuid()) @postgresql.Uuid
  name         String        @default("")
  description  String        @default("")
  photo        ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId      String?       @map("photo") @postgresql.Uuid
  price        Int?
  quantity     Int?
  order        Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId      String?       @map("order") @postgresql.Uuid
  dateCreated  DateTime?     @default(now())
  dateModified DateTime?     @default(now())

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id        String      @id @default(uuid()) @postgresql.Uuid
  total     Int?
  items     OrderItem[] @relation("OrderItem_order")
  user      User?       @relation("Order_user", fields: [userId], references: [id])
  userId    String?     @map("user") @postgresql.Uuid
  charge    String      @default("")
  createdAt DateTime?

  @@index([userId])
}

model Coupon {
  id                 String             @id @default(uuid()) @postgresql.Uuid
  name               String             @unique @default("")
  stripeId           String             @default("")
  amount_off         Int?
  percent_off        Int?
  duration_in_months Int?
  duration           String
  subscriptionItems  SubscriptionItem[] @relation("Coupon_subscriptionItems")
}

model Page {
  id             String     @id @default(uuid()) @postgresql.Uuid
  title          String     @default("")
  slug           String     @unique @default("")
  dateCreated    DateTime?  @default(now())
  dateModified   DateTime?  @default(now())
  status         String?    @default("DRAFT")
  template       String?    @default("FULLWIDTH")
  pinned         Int?       @default(0)
  excerpt        String     @default("")
  featured_image String     @default("")
  featured_video String     @default("")
  content        Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author         User?      @relation("Page_author", fields: [authorId], references: [id])
  authorId       String?    @map("author") @postgresql.Uuid
  categories     Category[] @relation("Category_pages")
  tags           Tag[]      @relation("Page_tags")

  @@index([authorId])
}

model Post {
  id             String     @id @default(uuid()) @postgresql.Uuid
  title          String     @default("")
  slug           String     @unique @default("")
  dateCreated    DateTime?  @default(now())
  dateModified   DateTime?  @default(now())
  status         String?    @default("DRAFT")
  template       String?    @default("FULLWIDTH")
  pinned         Int?       @default(0)
  excerpt        String     @default("")
  featured_image String     @default("")
  featured_video String     @default("")
  content        Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author         User?      @relation("Post_author", fields: [authorId], references: [id])
  authorId       String?    @map("author") @postgresql.Uuid
  categories     Category[] @relation("Category_posts")
  tags           Tag[]      @relation("Post_tags")
  allow_comments Boolean    @default(false)

  @@index([authorId])
}

model Event {
  id           String     @id @default(uuid()) @postgresql.Uuid
  summary      String     @default("[NEW]")
  location     Location?  @relation("Event_location", fields: [locationId], references: [id])
  locationId   String?    @map("location") @postgresql.Uuid
  start        DateTime
  end          DateTime?
  price        Int?       @default(0)
  hosts        User[]     @relation("Event_hosts")
  cohosts      User[]     @relation("Event_cohosts")
  tickets      Ticket[]   @relation("Ticket_event")
  seats        Int
  photo        String     @default("")
  description  String     @default("")
  status       String?    @default("ACTIVE")
  dateCreated  DateTime?  @default(now())
  dateModified DateTime?  @default(now())
  categories   Category[] @relation("Category_events")
  tags         Tag[]      @relation("Event_tags")

  @@index([locationId])
}

model Ticket {
  id       String  @id @default(uuid()) @postgresql.Uuid
  qrcode   String  @default("")
  event    Event?  @relation("Ticket_event", fields: [eventId], references: [id])
  eventId  String? @map("event") @postgresql.Uuid
  holder   User?   @relation("Ticket_holder", fields: [holderId], references: [id])
  holderId String? @map("holder") @postgresql.Uuid
  status   String? @default("CONFIRMED")

  @@index([eventId])
  @@index([holderId])
}

model Category {
  id            String             @id @default(uuid()) @postgresql.Uuid
  name          String             @unique @default("")
  description   String             @default("")
  pages         Page[]             @relation("Category_pages")
  posts         Post[]             @relation("Category_posts")
  products      Product[]          @relation("Category_products")
  subscriptions SubscriptionPlan[] @relation("Category_subscriptions")
  events        Event[]            @relation("Category_events")
  services      Service[]          @relation("Category_services")
  locations     Location[]         @relation("Category_locations")
  addons        Addon[]            @relation("Addon_categories")
}

model Tag {
  id            String             @id @default(uuid()) @postgresql.Uuid
  name          String             @unique @default("")
  pages         Page[]             @relation("Page_tags")
  posts         Post[]             @relation("Post_tags")
  products      Product[]          @relation("Product_tags")
  subscriptions SubscriptionPlan[] @relation("SubscriptionPlan_tags")
  events        Event[]            @relation("Event_tags")
  services      Service[]          @relation("Service_tags")
  locations     Location[]         @relation("Location_tags")
  addons        Addon[]            @relation("Addon_tags")
}
