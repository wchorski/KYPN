// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String     @id @default(uuid()) @postgresql.Uuid
  name                    String     @default("")
  email                   String     @unique @default("")
  password                String
  isAdmin                 Boolean    @default(false)
  isActive                Boolean    @default(true)
  stripeCustomerId        String     @default("NO_ID")
  posts                   Post[]     @relation("Post_author")
  cart                    CartItem[] @relation("CartItem_user")
  createdAt               DateTime?  @default(now())
  products                Product[]  @relation("Product_user")
  orders                  Order[]    @relation("Order_user")
  role                    Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?    @map("role") @postgresql.Uuid
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Role {
  id                String  @id @default(uuid()) @postgresql.Uuid
  name              String  @default("")
  canManageProducts Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canManageCart     Boolean @default(false)
  canManageOrders   Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}

model Product {
  id                    String        @id @default(uuid()) @postgresql.Uuid
  photo                 ProductImage? @relation("Product_photo", fields: [photoId], references: [id])
  photoId               String?       @unique @map("photo") @postgresql.Uuid
  name                  String        @default("")
  slug                  String        @unique @default("")
  description           String        @default("")
  status                String?       @default("DRAFT")
  price                 Int?
  stockCount            Int           @default(0)
  user                  User?         @relation("Product_user", fields: [userId], references: [id])
  userId                String?       @map("user") @postgresql.Uuid
  tags                  Tag[]         @relation("Product_tags")
  categories            Category[]    @relation("Category_products")
  from_CartItem_product CartItem[]    @relation("CartItem_product")

  @@index([userId])
}

model ProductImage {
  id                   String      @id @default(uuid()) @postgresql.Uuid
  image_filesize       Int?
  image_extension      String?
  image_width          Int?
  image_height         Int?
  image_id             String?
  altText              String      @default("Product Featured Image")
  filename             String      @unique @default("")
  product              Product?    @relation("Product_photo")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model CartItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  quantity  Int      @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user") @postgresql.Uuid

  @@index([productId])
  @@index([userId])
}

model OrderItem {
  id          String        @id @default(uuid()) @postgresql.Uuid
  name        String        @default("")
  description String        @default("")
  photo       ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     String?       @map("photo") @postgresql.Uuid
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String?       @map("order") @postgresql.Uuid

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id        String      @id @default(uuid()) @postgresql.Uuid
  total     Int?
  items     OrderItem[] @relation("OrderItem_order")
  user      User?       @relation("Order_user", fields: [userId], references: [id])
  userId    String?     @map("user") @postgresql.Uuid
  charge    String      @default("")
  createdAt DateTime?

  @@index([userId])
}

model Post {
  id             String     @id @default(uuid()) @postgresql.Uuid
  title          String     @default("")
  slug           String     @unique @default("")
  dateCreated    DateTime?  @default(now())
  dateModified   DateTime?  @default(now())
  status         String?    @default("DRAFT")
  template       String?    @default("FULLWIDTH")
  pinned         Int?       @default(0)
  excerpt        String     @default("")
  featured_image String     @default("")
  featured_video String     @default("")
  content        Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author         User?      @relation("Post_author", fields: [authorId], references: [id])
  authorId       String?    @map("author") @postgresql.Uuid
  categories     Category[] @relation("Category_posts")
  tags           Tag[]      @relation("Post_tags")
  allow_comments Boolean    @default(false)

  @@index([authorId])
}

model Category {
  id          String    @id @default(uuid()) @postgresql.Uuid
  name        String    @unique @default("")
  description String    @default("")
  posts       Post[]    @relation("Category_posts")
  products    Product[] @relation("Category_products")
}

model Tag {
  id       String    @id @default(uuid()) @postgresql.Uuid
  name     String    @unique @default("")
  posts    Post[]    @relation("Post_tags")
  products Product[] @relation("Product_tags")
}
