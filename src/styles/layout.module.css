/* //todo move this to var.scss file */
/* $sidebar-breakpoint: 1185px; */

.page_layout {

	/* // todo the `150px` is a magic number cheat because it ended up being too wide. idk why */
	--site-max-width: (calc(var(--w-sitemax) - 150px));
	--content-max-width: var(--w-contentmax);
	--padding-inline: var(--space-m);

	--sidebar-width: calc(var(--sidebar-width-footprint) / 2);

	--site-bounds: calc((var(--site-max-width) - var(--w-content-wide)) / 2);
	--wide-size: calc((var(--w-content-wide) - var(--content-max-width)) / 2);
	--breakout-size: calc((var(--w-content-breakout) - var(--content-max-width)));

	display: grid;
  row-gap: var(--space-m);

	/* //? if you update this don't forget about the media query below
  //todo maybe add a [layout_sidebar] as to propery set gaps and stuff */
	grid-template-columns:
		[layout_full-start] minmax(var(--padding-inline), 1fr)
		[layout_site-start] minmax(0, var(--site-bounds))
		[layout_wide-start] minmax(0, var(--wide-size))
		[layout_breakout-start] minmax(0, var(--breakout-size))
		[layout_content-start] min(
			100% - (var(--padding-inline) * 2),
			var(--content-max-width)
		)
		[layout_content-end] minmax(0, var(--breakout-size))
		[layout_breakout-end] minmax(0, var(--wide-size))
		[layout_wide-end] minmax(0, var(--site-bounds))
		[layout_site-end] minmax(var(--padding-inline), 1fr)
		[layout_full-end];   
}
.page_layout > header {
	grid-column: 1/-1;
	grid-row: 1;
	grid-template-columns: inherit;
}
.page_layout > header > .page_title {
	grid-column: layout_wide;
}

/* how am i gonna fix this? */
/* .page_content {
  & > :is(ul, nav, div){
    grid-column: layout_site;
  }
} */

.page_layout > .page_content {
	grid-row: 2;
	grid-column: layout_breakout;
  /* //TODO why does this break a lot of the layouts? */
  /* grid-template-columns: inherit;
  display: grid; */
}

.page_layout > aside,
.page_layout > .page_sidebar {
	grid-column: layout_content;
	grid-row: 4;
	z-index: 1;

	& > :first-child {
		position: sticky;
		top: var(--space-xl);
		max-width: var(--w-contentmax);
	}

	& > * > * {
		box-shadow: var(--shadow-1);
	}
}

.page_layout > footer {
	grid-column: layout_wide;
	grid-row: 3;
  grid-template-columns: inherit;
}

.page_layout,
.page_layout > .layout_full,
.page_layout > .layout_wide {
  & > :is(div:global(.flex), div:global(.grid)){
    grid-column: layout_site;
  }
	& > :is(figure, img, article, iframe, div:global(.mediatext)) {
		grid-column: layout_wide;
	}
  /* //? must target with `:global` as to not get hash id */
	& > :is( blockquote, pre, div:global(.gallery), div:global(.card), div:global(.youtubeVideo) ) {
		grid-column: layout_breakout;
    margin-block: var(--space-l);
	}

	& > :is(h1, h2, h3, h4, h5, h6, p, span, ul, ol, form, nav) {
		grid-column: layout_content;
	}
}

.page_layout > .layout_full:not(.flex, figure, img),
.page_layout > .layout_site_to_wide:not(.flex, figure, img),
.page_layout > .layout_wide:not(.flex, figure, img) {
	display: grid;
}

/* //todo use to have direct `>` selector, but is more flexible if not */
.page_layout .layout_full {
	grid-column: layout_full;
	grid-template-columns: inherit;
}

.page_layout .layout_site {
	z-index: 1;
	grid-column: layout_site;

}
.page_layout .layout_wide {
	z-index: 1;
	grid-column: layout_wide;

}

.page_layout .layout_breakout {
	z-index: 1;
	grid-column: layout_breakout;
}

.page_layout .layout_content {
	z-index: 1;
	grid-column: layout_content;
}

.page_title {
	grid-column: layout_wide;
}

/* asymetcial layouts */
.page_layout .layout_site_to_wide {
	grid-column: layout_site;
}

.page_layout hr {
  grid-column: layout_content;
}

@media screen and (width > 1185px) {
	.page_layout:has(> aside, > .page_sidebar) {
		grid-template-columns:
			[layout_full-start] minmax(0, 1fr)
			[layout_site-start] minmax(
				0,
				calc(var(--site-bounds) - var(--sidebar-width))
			)
			[layout_wide-start] minmax(0, calc(var(--wide-size)))
			[layout_breakout-start] minmax(0, calc(var(--breakout-size)))
			[layout_content-start] min(
				100% - (var(--padding-inline) * 2),
				var(--content-max-width)
			)
			[layout_content-end] minmax(0, calc(var(--breakout-size)))
			[layout_breakout-end] minmax(0, calc(var(--wide-size)))
			[layout_wide-end] minmax(
				0,
				calc(var(--site-bounds) + var(--sidebar-width))
			)
			[layout_site-end] minmax(0, 1fr)
			[layout_full-end];
	}
	.page_layout > aside,
	.page_layout > .page_sidebar {
		max-width: var(--sidebar-comp-max-width);
		grid-column: layout_wide-end/layout_full-end;
		grid-row: 2;
	}

	/* asymetcial layouts */
	.page_layout .layout_site_to_wide {
		grid-column: layout_site/layout_wide;
	}
}

/* // todo move this to a different module and apply `grid-column: layout_*` without inheriting the template columns */
.grid {
	display: grid;
}

.grid.auto {
	/* //? this is set on the component side via inline style
	// --col-min-width: 22rem; */
	grid-template-columns: repeat(
		auto-fill,
		minmax(calc(var(--col-min-width)), 1fr)
	);

	& > * {
		grid-column: auto;
	}
}