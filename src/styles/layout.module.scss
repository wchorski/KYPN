//todo move this to var.scss file
$sidebar-breakpoint: 1185px;

.page_layout {
	// background-color: rgb(66, 64, 37);
	//todo the `150px` is a magic number cheat because it ended up being too wide. idk why
	--site-max-width: (calc(var(--w-sitemax) - 150px));
	// --wide-max-width: var(--w-content-wide);;
	// --breakout-max-width: var(--w-content-breakout);
	--content-max-width: var(--w-contentmax);
	--padding-inline: var(--space-m);
	// --sidebar-width: calc(var(--w-sidebar) / 2);
	--sidebar-width: calc(var(--sidebar-width-footprint) / 2);

	--site-bounds: calc((var(--site-max-width) - var(--w-content-wide)) / 2);
	--wide-size: calc((var(--w-content-wide) - var(--content-max-width)) / 2);
	--breakout-size: calc((var(--w-content-breakout) - var(--content-max-width)));

	display: grid;
  row-gap: var(--space-m);

	//? if you update this don't forget about the media query below
  //todo maybe add a [layout_sidebar] as to propery set gaps and stuff
	grid-template-columns:
		[layout_full-start] minmax(var(--padding-inline), 1fr)
		[layout_site-start] minmax(0, var(--site-bounds))
		[layout_wide-start] minmax(0, var(--wide-size))
		[layout_breakout-start] minmax(0, var(--breakout-size))
		[layout_content-start] min(
			100% - (var(--padding-inline) * 2),
			var(--content-max-width)
		)
		[layout_content-end] minmax(0, var(--breakout-size))
		[layout_breakout-end] minmax(0, var(--wide-size))
		[layout_wide-end] minmax(0, var(--site-bounds))
		[layout_site-end] minmax(var(--padding-inline), 1fr)
		[layout_full-end];   
}
.page_layout > header {
	// background: #ff44006b;
	grid-column: 1/-1;
	//todo could be this?
	// grid-column: layout_full;
	grid-row: 1;
	grid-template-columns: inherit;
}
.page_layout > header > .page_title {
	grid-column: layout_wide;
}

.page_layout > .page_content {
	// background: #0084ff6b;
	grid-row: 2;
	grid-column: layout_breakout;
}

.page_layout > aside,
.page_layout > .page_sidebar {
	// background: #ff7b006b;
	grid-column: layout_content;
	grid-row: 4;
	z-index: 1;

	> :first-child {
		position: sticky;
		top: var(--space-xl);
		max-width: var(--w-contentmax);
	}

	> * > * {
		box-shadow: var(--shadow-1);
	}
}

.page_layout > footer {
	// background: #22ff006b;
	grid-column: 3;
	grid-row: 0;
}

//! trying to remove this for solution below
// .page_layout
// 	> :not(
// 		.layout_full,
// 		.layout_wide,
// 		.layout_breakout,
// 		.page_sidebar,
// 		.page_title
// 	),
// .page_layout
// 	.layout_full
// 	> :not(
// 		.layout_full,
// 		.layout_wide,
// 		.layout_breakout,
// 		.page_sidebar,
// 		.page_title
// 	),
// .page_layout
// 	.layout_wide
// 	> :not(
// 		.layout_full,
// 		.layout_wide,
// 		.layout_breakout,
// 		.page_sidebar,
// 		.page_title
// 	) {
// 	grid-column: layout_content;
// }

//? for any loose content that isn't put in a wrap,
//? this prevents content from touching window edges

.page_layout,
.page_layout > .layout_full,
.page_layout > .layout_wide {
	// todo continue to add stuff
	> :is(figure, img, article) {
		grid-column: layout_wide;
	}
  //? must target with `:global` as to not get hash id
	> :is( blockquote, pre, div:global(.gallery), div:global(.card) ) {
		grid-column: layout_breakout;
    margin-block: var(--space-l);
	}

	> :is(h1, h2, h3, h4, h5, h6, p, span, ul, ol, form) {
		grid-column: layout_content;
	}
}

.page_layout > .layout_full:not(.flex, figure, img),
.page_layout > .layout_site_to_wide:not(.flex, figure, img),
.page_layout > .layout_wide:not(.flex, figure, img) {
	display: grid;
}

//todo use to have direct `>` selector, but is more flexible if not
.page_layout .layout_full {
	grid-column: layout_full;
	grid-template-columns: inherit;
}

.page_layout .layout_site {
	z-index: 1;
	grid-column: layout_site;
	// grid-template-columns: inherit;
}
.page_layout .layout_wide {
	z-index: 1;
	grid-column: layout_wide;
	// grid-template-columns: inherit;
}

.page_layout .layout_breakout {
	z-index: 1;
	grid-column: layout_breakout;
}

.page_layout .layout_content {
	z-index: 1;
	grid-column: layout_content;
}

.page_title {
	grid-column: layout_wide;
}

// asymetcial layouts
.page_layout .layout_site_to_wide {
	grid-column: layout_site;
}

.page_layout hr {
  grid-column: layout_content;
}

@media screen and (width > $sidebar-breakpoint) {
	.page_layout:has(> aside, > .page_sidebar) {
		grid-template-columns:
			[layout_full-start] minmax(0, 1fr)
			[layout_site-start] minmax(
				0,
				calc(var(--site-bounds) - var(--sidebar-width))
			)
			[layout_wide-start] minmax(0, calc(var(--wide-size)))
			[layout_breakout-start] minmax(0, calc(var(--breakout-size)))
			[layout_content-start] min(
				100% - (var(--padding-inline) * 2),
				var(--content-max-width)
			)
			[layout_content-end] minmax(0, calc(var(--breakout-size)))
			[layout_breakout-end] minmax(0, calc(var(--wide-size)))
			[layout_wide-end] minmax(
				0,
				calc(var(--site-bounds) + var(--sidebar-width))
			)
			[layout_site-end] minmax(0, 1fr)
			[layout_full-end];
	}
	.page_layout > aside,
	.page_layout > .page_sidebar {
		// max-width: var(--w-sidebar-max);
		max-width: var(--sidebar-comp-max-width);
		grid-column: layout_wide-end/layout_full-end;
		grid-row: 2;
	}

	// asymetcial layouts
	.page_layout .layout_site_to_wide {
		grid-column: layout_site/layout_wide;
	}
}

// todo move this to a different module and apply `grid-column: layout_*` without inheriting the template columns
.grid {
	display: grid;
}

.grid.auto {
	//? this is set on the component side via inline style
	// --col-min-width: 22rem;
	grid-template-columns: repeat(
		auto-fill,
		minmax(calc(var(--col-min-width)), 1fr)
	);

	> * {
		grid-column: auto;
	}
}