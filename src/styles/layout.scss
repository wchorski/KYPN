$breakpoint-s: 650px;
$breakpoint-m: 800px;
$breakpoint-l: 1200px;
// LAYOUT

// // debug
// .siteWrapper{
//   border-left: 8px dashed yellow;
//   border-right: 8px dashed yellow;
// }

//! for_debugging
// .site-grid > * {
//   border: dotted red 2px;
// }
// .layout > * {
// 	border: dotted var(--c-debug) 1px;
// }

// :is(h1, h2, h3, h4, h5, h6, p, ol, ul) {
// 	border-left: dotted 1px var();
// }
//! for_debugging

.siteWrapper {
	max-width: var(--w-sitemax);
	margin-inline: auto;
	width: 100%;
}
// todo could make `:is(h1, h2...)` to a `:not(div)`
// fits any loose content to bounds of site width so you don't have to wrap everything in a wrapper
// :is(main, section, article) > :is(h1, h2, h3, h4, h5, h6, p, ul, ol) {
// :is(main, section) > :not(.site-grid, .grid, .flex, .siteWrapper, .main-content, header, section, article, aside) {
// 	max-width: var(--w-contentmax);
// 	margin-inline: auto;
// 	padding-inline: var(--space-m);
// 	display: block;
// }

.layout--fullwidth {
	// background: blue;
	display: grid;

	grid-template-areas:
		"banner  banner banner  banner"
		"headr   headr  headr   headr"
		"navi    navi   navi    navi"
		"main    main   main    main"
		"footer  footer footer  footer";
	grid-template-columns:
		minmax(0, 1fr)
		minmax(0, calc(var(--w-sitemax) / 2))
		minmax(0, calc(var(--w-sitemax) / 2))
		minmax(0, 1fr);

	align-content: flex-start;
}

// .layout--main-aside{

//   > aside {
//     display: flex;
//     flex-direction: column;
//     gap: 1rem;
//     margin-inline: 1rem;
//   }
// }

// @media (width > 830px) {

//   .layout--main-aside{
//     display: grid;

//     grid-template-areas:
//       "banner  banner banner  banner"
//       "headr   headr  headr   headr"
//       "navi    navi   navi    navi"
//       "main    main   aside   aside"
//       "footer  footer footer  footer"
//     ;
//     grid-template-columns:
//       minmax(0, 1fr)
//       minmax(0, calc(var(--w-sitemax) / 2 + var(--w-sidebar)))
//       minmax(0, calc(var(--w-sitemax) /2 - var(--w-sidebar)))
//       minmax(0, 1fr);
//     align-content: flex-start;

//     // // debug
//     // border: dotted 1px aqua;
//     // > * {
//     //   border: dashed 2px red;
//     // }

//     > header {
//       grid-area: headr;
//       grid-column: 1 / -1;
//     }

//     > nav {
//       grid-area: navi;
//       position: sticky;
//       top: 0;
//       z-index: 999;
//       grid-column: 1 / -1;
//     }

//     > main, > .page-wrapper {
//       grid-area: main;
//       grid-column: 2 / 3;
//     }

//     > aside {
//       grid-area: aside;
//       grid-column: 3 / 4;
//       position: sticky;
//       top: 4em;
//     }

//     > footer {
//       grid-area: footer;
//       grid-column: 1 / -1;
//     }
//   }

// }

// // all layouts have

.layout {
	// todo can i catch all any future layout? "&--*" ?
	&--main-aside,
	&--fullwidth {
		// border: double white 10px;
		// todo do i even need row template?
		// grid-template-rows: auto 1fr auto;

		// // debug
		// > * {
		//   border: dashed pink 2px;
		// }

		.banner_wrap {
			grid-area: banner;
			grid-column: 1/-1;
			// max-width: var(--w-sitemax);
			margin-inline: auto;
			width: 100%;
		}

		> header {
			grid-area: headr;
			grid-column: 1 / -1;
		}

		> nav {
			grid-area: navi;
			grid-column: 1 / -1;

			position: sticky;
			top: 0;
			z-index: 999;
		}

		> main {
			> section {
				// display: grid;
				// align-items: center;
				min-height: 45vh;
				display: grid;
				align-content: center;
			}
		}

		> footer {
			grid-area: footer;
			grid-column: 1 / -1;
		}
	}

	&--fullwidth {
		> main,
		> .page-wrapper {
			grid-area: main;
			grid-column: 1 / -1;
		}
	}

	&--main-aside {
		> main {
			grid-area: main;
			grid-column: 2 / 3;
		}

		> aside {
			grid-area: aside;
			grid-column: 3 / 4;
			position: sticky;
			top: 4em;
		}
	}
}

// SECTION NESTED GRIDS
// SECTION NESTED GRIDS
// SECTION NESTED GRIDS
.section {
	display: grid;
	grid-column: 1/-1;
	gap: 1rem;
	align-content: flex-start;
	padding-top: 1rem;
	padding-bottom: 1rem;

	// ? maybe do this? idk
	// min-height: 50vh;
	// min-height: 50dvh;
	position: relative;
	align-content: center;

	// // debug
	// > div {
	//   border: dashed grey 1px;
	// }
}

.content-center {
	> div {
		display: grid;
		align-content: center;
		// height: 50vh;
		// height: 50dvh;
	}
}

.site-grid {
	display: grid;
	grid-column: layout_site;
	//todo need to do this per item
	// align-items: start;

	grid-template-columns: minmax(0, 1fr);

	// grid-template-columns:
	// 	minmax(0, 1fr)
	// 	minmax(0, calc(var(--w-sitemax) + 1rem))
	// 	minmax(0, 1fr);

	> * {
		grid-column: 2/3;
		// display: grid;
		z-index: 1;
	}

	> :not(.site-grid, .grid, .grid-item, .flex, .flex-item, figure) {
		//todo causes overflow, but could be a really smart thing to get various amounts of content to line up
		// margin-inline: auto;
		//todo causing overflow too
		// width: clamp(1rem, 80vw, var(--w-contentmax));
		width: clamp(32vw, 76vw, var(--w-contentmax));
	}
	// > :is(h1, h2, h3, h4, h5, h6, p) {
	// 	padding-inline: var(--space-m);
	// }
	> .grid-item {
		display: grid;
    gap: var(--space-m);
    // TODO WHY IS MOBILE FUCKED?
		// > :is(p, ul, ol, h1, h2, h3, h4, h5, h6) {
		// 	margin-inline: var(--space-m);
		// }
	}
	//? `div:not([class])` has no class name
	// > .grid-item > div:not([class]) {
	// 	padding: var(--space-m);
	// 	min-width: 15rem;
	// }
}

// @media screen and (width > 829px) and (width < 1617px) {
//   section.section {
//     gap: 1rem;
//   }
// }

@media screen and (width > $breakpoint-s) {
	.site-grid._1 {
		// todo add `var(--space-m)` to replace `0` in `minmax(0, 1fr)` gutters
		grid-template-columns:
			minmax(var(--space-m), 1fr)
			minmax(0, calc(var(--w-sitemax)))
			minmax(var(--space-m), 1fr);

		> div {
			grid-column: 2/3;
			// max-width: (var(--w-contentmax));

			// todo could mess up document rich text
			// > ul, > li {
			//   padding-left: 1.5rem;
			// }
		}
	}

	.site-grid._1_1 {
		// grid-template-columns: repeat(auto-fit, minmax(calc(var(--w-sitemax) * 0.5), 1fr));
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.5))
			minmax(0, calc(var(--w-sitemax) * 0.5))
			minmax(0, 1fr);

		// > div {
		// 	display: grid;
		// }

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.5));
			> * {
				grid-column: 2;
			}
		}
		> div:last-child {
			grid-column: 3/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.5))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}

	.site-grid._1_2 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.3))
			minmax(0, calc(var(--w-sitemax) * 0.7))
			minmax(0, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.3));
			> * {
				grid-column: 2;
			}
		}
		> div:last-child {
			grid-column: 3/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.7))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}

	.site-grid._1_4 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.2))
			minmax(0, calc(var(--w-sitemax) * 0.8))
			minmax(0, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.2));
			> * {
				grid-column: 2;
			}
		}
		> div:last-child {
			grid-column: 3/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.8))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}

	.site-grid._2_1 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.7))
			minmax(0, calc(var(--w-sitemax) * 0.3))
			minmax(0, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.7));
			> * {
				grid-column: 2;
			}
		}
		> div:last-child {
			grid-column: 3/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.3))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}

	.site-grid._1_1_1 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.33))
			minmax(0, calc(var(--w-sitemax) * 0.33))
			minmax(0, calc(var(--w-sitemax) * 0.33))
			minmax(0, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.33));
			> * {
				grid-column: 2;
			}
		}
		> div:nth-child(2) {
			grid-column: 3/4;
		}
		> div:last-child {
			grid-column: 4/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.33))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}

	.site-grid._1_2_1 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.2))
			minmax(0, calc(var(--w-sitemax) * 0.59))
			minmax(0, calc(var(--w-sitemax) * 0.2))
			minmax(0, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.2));
			> * {
				grid-column: 2;
			}
		}
		> div:nth-child(2) {
			grid-column: 3/4;
		}
		> div:last-child {
			grid-column: 4/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.2))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}
}
@media screen and (width > $breakpoint-m) {
	//todo prob a better way to do this with `auto-fit` rows instead of 2 media queries
	.site-grid._1_1_1_1 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.25))
			minmax(0, calc(var(--w-sitemax) * 0.25))
			// minmax(0, calc(var(--w-sitemax) * 0.25))
			// minmax(0, calc(var(--w-sitemax) * 0.25))
			minmax(0, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.25));
			> * {
				grid-column: 2;
			}
		}
		> div:nth-child(2) {
			grid-column: 3/-1;
		}
		> div:nth-child(3) {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.25));
			> * {
				grid-column: 2;
			}
		}
		> div:last-child {
			grid-column: 3/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.25))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}
}

@media screen and (width > $breakpoint-l) {
	.site-grid._1_1_1_1 {
		grid-template-columns:
			minmax(0, 1fr)
			minmax(0, calc(var(--w-sitemax) * 0.25))
			minmax(0, calc(var(--w-sitemax) * 0.25))
			minmax(0, calc(var(--w-sitemax) * 0.25))
			minmax(0, calc(var(--w-sitemax) * 0.25))
			minmax(0, 1fr);
		// grid-template-columns: repeat(3, 1fr);

		> div:first-child {
			grid-column: 1/3;
			grid-template-columns:
				minmax(0, 1fr)
				minmax(0, calc(var(--w-sitemax) * 0.25));
			> * {
				grid-column: 2;
			}
		}
		> div:nth-child(2) {
			grid-column: 3/4;
		}
		> div:nth-child(3) {
			grid-column: 4/5;
		}
		> div:last-child {
			grid-column: 5/-1;
			grid-template-columns:
				minmax(0, calc(var(--w-sitemax) * 0.25))
				minmax(0, 1fr);
			> * {
				grid-column: 1;
			}
		}
	}
}

.flex {
	display: flex;
	// align-items: center;
	flex-wrap: wrap;
	gap: var(--space-m);
}

.gap-xxl {
	gap: var(--space-xxl);
}
.gap-xl {
	gap: var(--space-xl);
}
.gap-l {
	gap: var(--space-l);
}
.gap-ml {
	gap: var(--space-ml);
}
.gap-m {
	gap: var(--space-m);
}
.gap-ms {
	gap: var(--space-ms);
}
.gap-s {
	gap: var(--space-s);
}
.gap-xs {
	gap: var(--space-xs);
}

.padding-0 {
	padding: 0;
}

//? my attempt at grid areas
// .post-layout {
// 	display: grid;
// 	grid-template-areas:
// 		"header   header"
// 		"content  content"
// 		"footer   footer";

// 	//todo try out minmax or clamp for these values?
// 	grid-template-columns: 1fr var(--w-contentmax);

// 	> header {
// 		grid-area: header;
// 	}

// 	> .content {
// 		// background-color: aqua;
// 		grid-area: content;
// 	}
// 	// > aside {
// 	//   background-color: limegreen;
// 	//   grid-area: sidebar;
// 	// }
// 	> footer {
// 		// background-color: violet;
// 		grid-area: footer;
// 	}
// }

.post-layout {
	// background-color: rgb(66, 64, 37);
	--padding-inline: var(--space-m);
	--content-max-width: var(--w-contentmax);
	--breakout-max-width: 700px;
	--wide-max-width: 800px;

	--breakout-size: calc(
		(var(--breakout-max-width) - var(--content-max-width)) / 1
	);
	--wide-size: calc((var(--wide-max-width) - var(--content-max-width)) / 2);

	display: grid;

	grid-template-columns:
		[layout-full-start] minmax(var(--padding-inline), 1fr)
		[layout-wide-start] minmax(0, var(--wide-size))
		[layout-breakout-start] minmax(0, var(--breakout-size))
		[layout-content-start] min(
			100% - (var(--padding-inline) * 2),
			var(--content-max-width)
		)
		[layout-content-end] minmax(0, var(--breakout-size))
		[layout-breakout-end] minmax(0, var(--wide-size))
		[layout-wide-end] minmax(var(--padding-inline), 1fr)
		[layout-full-end];

	> header {
		// background: #ff44006b;
		grid-column: 1/-1;
		grid-row: 1;
		grid-template-columns: inherit;

		.post-title {
			grid-column: layout-wide;
		}
	}

	> .content {
		// background: #0084ff6b;
		grid-row: 2;
		grid-column: layout-breakout;
	}

	> aside,
	> .post-sidebar {
		// background: #ff7b006b;
		grid-column: layout-content;
		grid-row: 4;
		z-index: 1;

		> :first-child {
			position: sticky;
			top: var(--space-xl);
			max-width: var(--w-contentmax);
		}

		> * > * {
			box-shadow: var(--shadow-1);
		}
	}

	@media screen and (width > 1185px) {
		> aside,
		> .post-sidebar {
			grid-column: layout-wide-end/layout-full-end;
			grid-row: 2;
		}
	}

	> footer {
		// background: #22ff006b;
		grid-column: 3;
		grid-row: 0;
	}

	> :not(
			.layout-full,
			.layout-wide,
			.layout-breakout,
			.post-sidebar,
			.post-title
		),
	.layout-full
		> :not(
			.layout-full,
			.layout-wide,
			.layout-breakout,
			.post-sidebar,
			.post-title
		),
	.layout-wide
		> :not(
			.layout-full,
			.layout-wide,
			.layout-breakout,
			.post-sidebar,
			.post-title
		) {
		grid-column: layout-content;
	}

	.layout-full:not(.flex),
	.layout-wide:not(.flex) {
		display: grid;
	}

	.layout-full {
		grid-column: layout-full;
		grid-template-columns: inherit;
	}

	.layout-wide {
		z-index: 1;
		grid-column: layout-wide;
		grid-template-columns: inherit;
	}

	.layout-breakout {
		z-index: 1;
		grid-column: layout-breakout;
	}

	.layout-content {
		z-index: 1;
		grid-column: layout-content;
	}
}

// > .layout-wide.grid > :not(.layout-full, .layout-wide, .layout-breakout, .post-sidebar, .post-title) {
//   grid-column: layout-wide;
// }
// .layout-wide.grid {
// 	grid-template-columns: unset;

//   > * {
//     grid-column: unset !important;
//   }
// }
