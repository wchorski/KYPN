// @ts-nocheck
// cred - https://github.com/carlos815/3rd-shop-backend/blob/main/types.ts
// NOTE -- these types are commented out in master because they aren't generated by the build (yet)
// To get full List and GraphQL API type support, uncomment them here and use them below
// import type { KeystoneListsTypeInfo } from './.keystone/schema-types';

import { KeystoneGraphQLAPI, KeystoneListsAPI } from "@keystone-6/core/types"
import type { Permission } from "./schemas/fields"
//todo hopefully types will be auto imported from keystone context.
// for now we will manually import types
// https://github.com/keystonejs/keystone/discussions/8498
import type { Lists, PostCreateInput, ServiceCreateInput } from ".keystone/types"

export type Booking = Lists.Booking.Item & {

	author: User
	content: { document: any }
  service?: Service
  location: Location
  addons: Addon[]
  employees: User[]
  employee_requests: User[]
  customer: User
  //? these are redefined because ks sees them as `Date` but really it's just ISO string
  dateModified:string
  start:string
  end:string
  //? virtual item isn't included
  durationInHours:string
}

export type CalloutStatus = "info" | "warning" | "error" | "success"

export type Session = {
	user?:
		| {
				name?: string | null | undefined
				email?: string | null | undefined
				image?: string | null | undefined
		  }
		| undefined
	authId: string
	id: string
	itemId: string
	data: {
		role?: Role
	}
	expires: string
}

export type SpaceSize =
	| "xxs"
	| "xs"
	| "s"
	| "ms"
	| "m"
	| "ml"
	| "l"
	| "xl"
	| "xxl"
	| 0
	| "0"
export type ColorsTheme =
	| "bg_c_plain"
	| "bg_c_primary"
	| "bg_c_secondary"
	| "bg_c_tertiary"
	| "bg_c_accent"
	| "bg_c_transparent"
	| "bg_c_reverse_theme"
export type WidthLayoutSize =
	| "layout-full"
	| "layout-wide"
	| "layout-breakout"
	| "layout-content"
export type WidthLayoutSize2 =
	| "layout_full"
	| "layout_wide"
	| "layout_breakout"
	| "layout_content"
	| "layout_site"

export type GridLayout =
	| "1"
	| "1_1"
	| "1_2"
	| "2_1"
	| "1_4"
	| "1_1_1"
	| "1_2_1"
	| "1_1_1_1"

export type SelectOption = {
	value: string
	label: string
}

export type CheckboxOption = {
	value: string
	label: string
	isChecked: boolean
}

export type DayTimes = {
	day: Date
	times: string[]
}

export type TOCLink = {
	type: string
	level: number
	slug: string
	text: string
}
export type KSHeading = {
	type: string
	level: number
	children: { text: string }[]
}

//** Schema Lists */
export type User = Lists.User.Item & { 
  role: Role 
  posts: Post[]
  pages: Page[]
  privatePagesAccess: Page[]
  privatePostsAccess: Post[]
  servicesProvided: Service[]
  bookings: Booking[]
  gigs: Booking[]
  gig_requests: Booking[]
  availability: Availability[]
}

export type Category = Lists.Category.Item

export type Tag = Lists.Tag.Item

export type Page = Lists.Page.Item & {
	categories: Category[]
	tags: Tag[]
	author: User
	content: { document: any }
}
export type Post = Lists.Post.Item & {
	categories: Category[]
	tags: Tag[]
	author: User
	content: { document: any }
}



//? makes it easy to query data with Apollo tool and copy paste json into `seed_data.ts` without any reformatting 
export type SeedPost = PostCreateInput & {
  content?:{
    document:any
  }
  tags?: {
    name:string
  }[]
  categories?: {
    name:string
  }[]
  author?: {
    email:string
  }
}

export type SeedService = ServiceCreateInput & {
  description?:{
    document:any
  }
  tags?: {
    name:string
  }[]
  categories?: {
    name:string
  }[]
  author?: {
    email:string
  }
  addons?: {
    slug: string
  }[]
}

export type Announcement = Lists.Announcement.Item & {
	// link: string
	// start: string
	// end: string
	colorTheme: ColorsTheme
	// type: "MAINTENANCE" | "NORMAL" | "CRITICAL" | "SALE"
	content: {
		document: any
	}
}
// ? didn't like "[key in Permission]: boolean;"
// export type Session = {
//   itemId?: string;
//   listKey?: string;
//   data?: {
//     name: string;
//     role?: {
//       id?: string;
//       name?: string;
//     } & {
//       [key in Permission]: boolean;
//     };
//   };
// }|null

export type ListsAPI = KeystoneListsAPI<any /* KeystoneListsTypeInfo */>
export type GraphqlAPI = KeystoneGraphQLAPI<any /* KeystoneListsTypeInfo */>

export type AccessArgs = {
	session?: Session
	item?: any
}

export type AccessControl = {
	[key: string]: (args: AccessArgs) => any
}

export type ListAccessArgs = {
	itemId?: string
	session?: Session
	context?: any
}

// export type CartItem = {
// 	id: string
// 	type: "SALE" | "RENTAL"
// 	quantity: number
// 	product: Product
// }

// export type Coupon = {
// 	name: string
// 	amount_off: number
// 	percent_off: number
// 	duration_in_months: number
// 	duration: "once" | "repeating" | "forever"
// }

// export type Event = {
// 	typeof: "event"
// 	id: string
// 	summary: string
// 	location: Location
// 	start: string
// 	end: string
// 	price: number
// 	hosts: User[]
// 	tickets: Ticket[]
// 	seats: number
// 	description: {
// 		document: any
// 	}
// 	excerpt: string
// 	image: string
// 	status: string
// 	dateCreated: string
// 	dateModified: string
// 	tags: Tag[]
// 	categories: Category[]
// }

export type Ticket = {
	status: string
	// id: string
	// email: string
	// qrcode: string
	// event: Event
	// holder: User
	// orderCount: string
}

export type Product = {
	status: string
	// id: string
	// price: number
	// rental_price: number
	// name: string
	// slug: string
	// stockCount: number
	// excerpt: string
	// description: {
	// 	document: any
	// }
	// photo: Photo
	// image: string
	// stripeProductId: string
	// stripePriceId: string
	// tags: Tag[]
	// categories: Category[]
	// dateCreated: string
	// dateModified: string
	// author: User
	// rentals: Rental
	// isForSale: boolean
	// isForRent: boolean
}

export type Rental = {
	// id: string
	// start: string
	// end: string
	// summary?: string
	// durationInHours?: string
	// order: Order
	// price?: number
	// // employees: User[],
	// addons?: Addon[]
	// customer?: User
	// location: string
	// email?: string
	// phone?: string
	// name?: string
	// notes: string
	status:
		| "ACTIVE"
		| "POSTPONED"
		| "CANCELED"
		| "LEAD"
		| "PAID"
		| "DOWNPAYMENT"
		| "HOLDING"
	// dateCreated?: string
	// dateModified?: string
	// delivery: boolean
	// google?: {
	// 	id?: string
	// 	kind?: string
	// 	status?: string
	// 	message?: string
	// 	htmlLink?: string
	// }
}

// export type ProductImage = {
// 	image: any
// 	url: string
// 	altText: string
// 	filename: string
// 	product: Product
// 	subscription: any
// }

// export type Photo = {
// 	id: string
// 	altText: string
// 	image: {
// 		url: string
// 	}
// }

// export type Orders = {
// 	Orders: [Order]
// }
// export type Order = Lists.Order.Item
export type Order = {
	// id: string
	// charge?: string
	// total: number
	// dateCreated?: string
	// user?: User
	// items: OrderItem[]
	// ticketItems?: Ticket[]
	status:
		| "OPEN"
		| "CANCELLED"
		| "FULFILLED"
		| "REFUNDED"
		| "RETURNED"
		| "EXPIRED"
		| "STARTED"
		| "PAYMENT_PENDING"
		| "PAYMENT_RECIEVED"
		| "PROCESSING"
		| "SHIPPED"
		| "DELIVERED"
}

// export type OrderItem = {
// 	id: string
// 	name: string
// 	description: string
// 	price: number
// 	quantity: number
// 	type: "RENTAL" | "SALE"
// 	productId: string
// 	product: Product
// 	photo: Photo
// 	image: string
// 	dateCreated: string
// 	dateModified: string
// }

export type Availability = Lists.Availability.Item & {
  employee: User,
  start:string
  end:string
  bookings: Booking[]
  //? virtual "number" is technically a string
  durationInHours:string,
}


export type BookingPrevious = {
	bookingId: string
	serviceId: string
	date: string
	time: string
}

export type Service = Lists.Service.Item & {
  description: {
    document: any
  }
  employees: User[]
	bookings: Booking[]
	categories: Category[]
	tags: Tag[]
	locations: Location[]
	addons: Addon[]
  buisnessDays:number[]
}

export type Location = Lists.Location.Item & {
	services: Service[]
	bookings: Booking[]
	categories: Category[]
	tags: Tag[]
	bookings: Booking[]
}

export type Billing_Interval = "day" | "week" | "month" | "year"
export type Duration = "forever" | "once" | "repeating"

// export type SubscriptionPlan = {
// 	id: string
// 	image: string
// 	author: User
// 	name: string
// 	slug: string
// 	excerpt: string
// 	description: {
// 		document: any
// 	}
// 	status: string
// 	price: number
// 	stripeProductId: string
// 	stripePriceId: string
// 	billing_interval: Billing_Interval
// 	items: SubscriptionItem[]
// 	stockMax: number
// 	tags: Tag[]
// 	categories: Category[]
// 	addons: Addon[]
// 	coupons: Coupon[]
// }

export type SubscriptionItem = {
	// id: string
	status:
		| "ACTIVE"
		| "TRIAL"
		| "EXPIRED"
		| "CANCELED"
		| "SUSPENDED"
		| "PAUSED"
		| "DELINQUENT"
	// custom_price: number
	// billing_interval: Billing_Interval
	// subscriptionPlan: SubscriptionPlan
	// isActive: boolean
	// isDelinquent: boolean
	// user: User
	// stripeSubscriptionId: string
	// stripeChargeId: string
	// dateCreated: string
	// dateModified: string
	// notes: string
}
export type Addon = Lists.Addon.Item & {
  author?: User
  services?:Service[]
  bookings?:Booking[]
  categories: Category[]
	tags: Tag[]
}
// export type Addon = {
// 	id: string
// 	name: string
// 	slug: string
// 	image: string
// 	description: string
// 	price: number
// 	stripeProductId: string
// 	services: Service[]
// 	bookings: Booking[]
// 	categories: Category[]
// 	tags: Tag[]
// 	excerpt: string
// 	status: "DRAFT" | "PUBLIC" | "OUT_OF_STOCK" | "PRIVATE"
// 	dateCreated: string
// 	dateModified: string
// }

export type AddonCheckboxOptions = {
	name: string
	label: string
	id: string
	isChecked: boolean
	price: number|null
}

export type IDObj = {
	id: string
}

export type DateRange = {
	start: Date
	end: Date
}
export type StringRange = {
	start: string
	end: string
}
