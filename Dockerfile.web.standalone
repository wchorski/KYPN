ARG PRODUCTION_PLATFORM
FROM --platform=${PRODUCTION_PLATFORM:-linux/amd64} node:21-alpine AS base

FROM base AS builder
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# COPY package.json yarn.lock package-lock.json pnpm-lock.yaml ./
# COPY package.json ./
# COPY yarn.lock ./
# COPY package-lock.json ./
COPY pnpm-lock.yaml ./
COPY . ./

## TODO just use $PKG_MGMR instead of this crazy if logic. Once I test it of course

RUN \
  if [ -f yarn.lock ]; then \ 
    yarn install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then \ 
    npm ci; \
  elif [ -f pnpm-lock.yaml ]; then \ 
    corepack enable pnpm && pnpm i --frozen-lockfile; \
  else \ 
    echo "Lockfile not found." && exit 1; \
  fi

# RUN corepack enable pnpm && pnpm i --frozen-lockfile;

RUN \
  if [ -f yarn.lock ]; then \ 
    yarn next telemetry disable; \
  elif [ -f package-lock.json ]; then\ 
    npm next telemetry disable; \
  elif [ -f pnpm-lock.yaml ]; then \ 
  pnpm next telemetry disable; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

RUN \
  if [ -f yarn.lock ]; then \ 
    yarn add sharp; \
  elif [ -f package-lock.json ]; then\ 
    npm install sharp; \
  elif [ -f pnpm-lock.yaml ]; then \ 
  pnpm add sharp; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Learn more here: https://nextjs.org/telemetry
ENV NEXT_TELEMETRY_DISABLED 1


RUN \
  if [ -f yarn.lock ]; then \ 
    yarn run build; \
  elif [ -f package-lock.json ]; then \ 
    npm run build; \
  elif [ -f pnpm-lock.yaml ]; then \ 
    corepack enable pnpm && pnpm run build; \
  else \ 
    echo "Lockfile not found." && exit 1; \
  fi
  
RUN \
  if [ -f yarn.lock ]; then  \
    yarn next telemetry disable; \
  elif [ -f package-lock.json ]; then  \
    npm next telemetry disable; \
  elif [ -f pnpm-lock.yaml ];  then \
    pnpm next telemetry disable; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED 1

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
# COPY --from=builder /app/.keystone ./.keystone
# COPY --from=builder /app/schema.prisma ./schema.prisma

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

ARG WEB_PORT
EXPOSE $WEB_PORT

ENV PORT $WEB_PORT

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD HOSTNAME="0.0.0.0" node server.js