# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  nameLast: String
  authId: String
  image: String
  phone: String
  email: String
  password: String
  url: String
  isActive: Boolean
  stripeCustomerId: String
  dateCreated: DateTime
  dateModified: DateTime
  buisnessHourOpen: String
  buisnessHourClosed: String
  role: Role
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  privatePagesAccess(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  privatePagesAccessCount(where: PageWhereInput! = {}): Int
  privatePostsAccess(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  privatePostsAccessCount(where: PostWhereInput! = {}): Int
  servicesProvided(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesProvidedCount(where: ServiceWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  gigs(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  gigsCount(where: BookingWhereInput! = {}): Int
  gig_requests(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  gig_requestsCount(where: BookingWhereInput! = {}): Int
  eventsHost(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsHostCount(where: EventWhereInput! = {}): Int
  eventsCohost(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCohostCount(where: EventWhereInput! = {}): Int
  availability(where: AvailabilityWhereInput! = {}, orderBy: [AvailabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AvailabilityWhereUniqueInput): [Availability!]
  availabilityCount(where: AvailabilityWhereInput! = {}): Int
  cart(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartItemWhereUniqueInput): [CartItem!]
  cartCount(where: CartItemWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  rentals(where: RentalWhereInput! = {}, orderBy: [RentalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RentalWhereUniqueInput): [Rental!]
  rentalsCount(where: RentalWhereInput! = {}): Int
  subscriptionPlans(where: SubscriptionPlanWhereInput! = {}, orderBy: [SubscriptionPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionPlanWhereUniqueInput): [SubscriptionPlan!]
  subscriptionPlansCount(where: SubscriptionPlanWhereInput! = {}): Int
  subscriptions(where: SubscriptionItemWhereInput! = {}, orderBy: [SubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionItemWhereUniqueInput): [SubscriptionItem!]
  subscriptionsCount(where: SubscriptionItemWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketsCount(where: TicketWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  authId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  nameLast: StringFilter
  authId: StringFilter
  image: StringFilter
  phone: StringFilter
  email: StringFilter
  password: StringFilter
  url: StringFilter
  isActive: BooleanFilter
  stripeCustomerId: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  buisnessHourOpen: StringNullableFilter
  buisnessHourClosed: StringNullableFilter
  role: RoleWhereInput
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  privatePagesAccess: PageManyRelationFilter
  privatePostsAccess: PostManyRelationFilter
  servicesProvided: ServiceManyRelationFilter
  bookings: BookingManyRelationFilter
  gigs: BookingManyRelationFilter
  gig_requests: BookingManyRelationFilter
  eventsHost: EventManyRelationFilter
  eventsCohost: EventManyRelationFilter
  availability: AvailabilityManyRelationFilter
  cart: CartItemManyRelationFilter
  products: ProductManyRelationFilter
  addons: AddonManyRelationFilter
  rentals: RentalManyRelationFilter
  subscriptionPlans: SubscriptionPlanManyRelationFilter
  subscriptions: SubscriptionItemManyRelationFilter
  orders: OrderManyRelationFilter
  tickets: TicketManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input BookingManyRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input AvailabilityManyRelationFilter {
  every: AvailabilityWhereInput
  some: AvailabilityWhereInput
  none: AvailabilityWhereInput
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input AddonManyRelationFilter {
  every: AddonWhereInput
  some: AddonWhereInput
  none: AddonWhereInput
}

input RentalManyRelationFilter {
  every: RentalWhereInput
  some: RentalWhereInput
  none: RentalWhereInput
}

input SubscriptionPlanManyRelationFilter {
  every: SubscriptionPlanWhereInput
  some: SubscriptionPlanWhereInput
  none: SubscriptionPlanWhereInput
}

input SubscriptionItemManyRelationFilter {
  every: SubscriptionItemWhereInput
  some: SubscriptionItemWhereInput
  none: SubscriptionItemWhereInput
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input TicketManyRelationFilter {
  every: TicketWhereInput
  some: TicketWhereInput
  none: TicketWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nameLast: OrderDirection
  authId: OrderDirection
  image: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  password: OrderDirection
  url: OrderDirection
  isActive: OrderDirection
  stripeCustomerId: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  buisnessHourOpen: OrderDirection
  buisnessHourClosed: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  nameLast: String
  authId: String
  image: String
  phone: String
  email: String
  password: String
  url: String
  isActive: Boolean
  stripeCustomerId: String
  dateCreated: DateTime
  dateModified: DateTime
  buisnessHourOpen: String
  buisnessHourClosed: String
  role: RoleRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  privatePagesAccess: PageRelateToManyForUpdateInput
  privatePostsAccess: PostRelateToManyForUpdateInput
  servicesProvided: ServiceRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  gigs: BookingRelateToManyForUpdateInput
  gig_requests: BookingRelateToManyForUpdateInput
  eventsHost: EventRelateToManyForUpdateInput
  eventsCohost: EventRelateToManyForUpdateInput
  availability: AvailabilityRelateToManyForUpdateInput
  cart: CartItemRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  rentals: RentalRelateToManyForUpdateInput
  subscriptionPlans: SubscriptionPlanRelateToManyForUpdateInput
  subscriptions: SubscriptionItemRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  tickets: TicketRelateToManyForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input BookingRelateToManyForUpdateInput {
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input AvailabilityRelateToManyForUpdateInput {
  disconnect: [AvailabilityWhereUniqueInput!]
  set: [AvailabilityWhereUniqueInput!]
  create: [AvailabilityCreateInput!]
  connect: [AvailabilityWhereUniqueInput!]
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input AddonRelateToManyForUpdateInput {
  disconnect: [AddonWhereUniqueInput!]
  set: [AddonWhereUniqueInput!]
  create: [AddonCreateInput!]
  connect: [AddonWhereUniqueInput!]
}

input RentalRelateToManyForUpdateInput {
  disconnect: [RentalWhereUniqueInput!]
  set: [RentalWhereUniqueInput!]
  create: [RentalCreateInput!]
  connect: [RentalWhereUniqueInput!]
}

input SubscriptionPlanRelateToManyForUpdateInput {
  disconnect: [SubscriptionPlanWhereUniqueInput!]
  set: [SubscriptionPlanWhereUniqueInput!]
  create: [SubscriptionPlanCreateInput!]
  connect: [SubscriptionPlanWhereUniqueInput!]
}

input SubscriptionItemRelateToManyForUpdateInput {
  disconnect: [SubscriptionItemWhereUniqueInput!]
  set: [SubscriptionItemWhereUniqueInput!]
  create: [SubscriptionItemCreateInput!]
  connect: [SubscriptionItemWhereUniqueInput!]
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input TicketRelateToManyForUpdateInput {
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  create: [TicketCreateInput!]
  connect: [TicketWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  nameLast: String
  authId: String
  image: String
  phone: String
  email: String
  password: String
  url: String
  isActive: Boolean
  stripeCustomerId: String
  dateCreated: DateTime
  dateModified: DateTime
  buisnessHourOpen: String
  buisnessHourClosed: String
  role: RoleRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  privatePagesAccess: PageRelateToManyForCreateInput
  privatePostsAccess: PostRelateToManyForCreateInput
  servicesProvided: ServiceRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  gigs: BookingRelateToManyForCreateInput
  gig_requests: BookingRelateToManyForCreateInput
  eventsHost: EventRelateToManyForCreateInput
  eventsCohost: EventRelateToManyForCreateInput
  availability: AvailabilityRelateToManyForCreateInput
  cart: CartItemRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
  rentals: RentalRelateToManyForCreateInput
  subscriptionPlans: SubscriptionPlanRelateToManyForCreateInput
  subscriptions: SubscriptionItemRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  tickets: TicketRelateToManyForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input BookingRelateToManyForCreateInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input AvailabilityRelateToManyForCreateInput {
  create: [AvailabilityCreateInput!]
  connect: [AvailabilityWhereUniqueInput!]
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input AddonRelateToManyForCreateInput {
  create: [AddonCreateInput!]
  connect: [AddonWhereUniqueInput!]
}

input RentalRelateToManyForCreateInput {
  create: [RentalCreateInput!]
  connect: [RentalWhereUniqueInput!]
}

input SubscriptionPlanRelateToManyForCreateInput {
  create: [SubscriptionPlanCreateInput!]
  connect: [SubscriptionPlanWhereUniqueInput!]
}

input SubscriptionItemRelateToManyForCreateInput {
  create: [SubscriptionItemCreateInput!]
  connect: [SubscriptionItemWhereUniqueInput!]
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input TicketRelateToManyForCreateInput {
  create: [TicketCreateInput!]
  connect: [TicketWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  label: String
  description: String
  canViewUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManagePages: Boolean
  canManagePosts: Boolean
  canCreatePosts: Boolean
  canManageCategories: Boolean
  canManageTags: Boolean
  canManageAnnouncements: Boolean
  canManageProducts: Boolean
  canViewProducts: Boolean
  canManageAddons: Boolean
  canManageBookings: Boolean
  canManageAvailability: Boolean
  canCreateAvailability: Boolean
  canManageEvents: Boolean
  canManageTickets: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageLocations: Boolean
  canViewPrivateLocations: Boolean
  canManageServices: Boolean
  canManageSubscriptionPlans: Boolean
  canManageSubscriptionItems: Boolean
  canManageCoupons: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
  name: String
  label: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  label: StringFilter
  description: StringFilter
  canViewUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManagePages: BooleanFilter
  canManagePosts: BooleanFilter
  canCreatePosts: BooleanFilter
  canManageCategories: BooleanFilter
  canManageTags: BooleanFilter
  canManageAnnouncements: BooleanFilter
  canManageProducts: BooleanFilter
  canViewProducts: BooleanFilter
  canManageAddons: BooleanFilter
  canManageBookings: BooleanFilter
  canManageAvailability: BooleanFilter
  canCreateAvailability: BooleanFilter
  canManageEvents: BooleanFilter
  canManageTickets: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  canManageLocations: BooleanFilter
  canViewPrivateLocations: BooleanFilter
  canManageServices: BooleanFilter
  canManageSubscriptionPlans: BooleanFilter
  canManageSubscriptionItems: BooleanFilter
  canManageCoupons: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  label: OrderDirection
  description: OrderDirection
  canViewUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManagePages: OrderDirection
  canManagePosts: OrderDirection
  canCreatePosts: OrderDirection
  canManageCategories: OrderDirection
  canManageTags: OrderDirection
  canManageAnnouncements: OrderDirection
  canManageProducts: OrderDirection
  canViewProducts: OrderDirection
  canManageAddons: OrderDirection
  canManageBookings: OrderDirection
  canManageAvailability: OrderDirection
  canCreateAvailability: OrderDirection
  canManageEvents: OrderDirection
  canManageTickets: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
  canManageLocations: OrderDirection
  canViewPrivateLocations: OrderDirection
  canManageServices: OrderDirection
  canManageSubscriptionPlans: OrderDirection
  canManageSubscriptionItems: OrderDirection
  canManageCoupons: OrderDirection
}

input RoleUpdateInput {
  name: String
  label: String
  description: String
  canViewUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManagePages: Boolean
  canManagePosts: Boolean
  canCreatePosts: Boolean
  canManageCategories: Boolean
  canManageTags: Boolean
  canManageAnnouncements: Boolean
  canManageProducts: Boolean
  canViewProducts: Boolean
  canManageAddons: Boolean
  canManageBookings: Boolean
  canManageAvailability: Boolean
  canCreateAvailability: Boolean
  canManageEvents: Boolean
  canManageTickets: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageLocations: Boolean
  canViewPrivateLocations: Boolean
  canManageServices: Boolean
  canManageSubscriptionPlans: Boolean
  canManageSubscriptionItems: Boolean
  canManageCoupons: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  label: String
  description: String
  canViewUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManagePages: Boolean
  canManagePosts: Boolean
  canCreatePosts: Boolean
  canManageCategories: Boolean
  canManageTags: Boolean
  canManageAnnouncements: Boolean
  canManageProducts: Boolean
  canViewProducts: Boolean
  canManageAddons: Boolean
  canManageBookings: Boolean
  canManageAvailability: Boolean
  canCreateAvailability: Boolean
  canManageEvents: Boolean
  canManageTickets: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageLocations: Boolean
  canViewPrivateLocations: Boolean
  canManageServices: Boolean
  canManageSubscriptionPlans: Boolean
  canManageSubscriptionItems: Boolean
  canManageCoupons: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Announcement {
  id: ID!
  link: String
  start: DateTime
  end: DateTime
  colorTheme: String
  type: String
  content: Announcement_content_Document
}

type Announcement_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AnnouncementWhereUniqueInput {
  id: ID
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IDFilter
  link: StringFilter
  start: DateTimeNullableFilter
  end: DateTimeNullableFilter
  colorTheme: StringNullableFilter
  type: StringNullableFilter
}

input AnnouncementOrderByInput {
  id: OrderDirection
  link: OrderDirection
  start: OrderDirection
  end: OrderDirection
  colorTheme: OrderDirection
  type: OrderDirection
}

input AnnouncementUpdateInput {
  link: String
  start: DateTime
  end: DateTime
  colorTheme: String
  type: String
  content: JSON
}

input AnnouncementUpdateArgs {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateInput!
}

input AnnouncementCreateInput {
  link: String
  start: DateTime
  end: DateTime
  colorTheme: String
  type: String
  content: JSON
}

type Booking {
  id: ID!
  typeof: String
  start: DateTime
  end: DateTime
  timeZone: String
  address: String
  summary: String
  durationInHours: Decimal
  price: Int
  service: Service
  location: Location
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  employees(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  employeesCount(where: UserWhereInput! = {}): Int
  employee_requests(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  employee_requestsCount(where: UserWhereInput! = {}): Int
  customer: User
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  email: String
  phone: String
  name: String
  status: String
  details: Booking_details_Document
  notes: String
  secretNotes: String
  revision: Int
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

scalar Decimal

type Booking_details_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  start: DateTimeFilter
  end: DateTimeFilter
  timeZone: StringFilter
  address: StringFilter
  price: IntFilter
  service: ServiceWhereInput
  location: LocationWhereInput
  addons: AddonManyRelationFilter
  employees: UserManyRelationFilter
  employee_requests: UserManyRelationFilter
  customer: UserWhereInput
  coupons: CouponManyRelationFilter
  email: StringFilter
  phone: StringFilter
  name: StringFilter
  status: StringNullableFilter
  notes: StringFilter
  secretNotes: StringFilter
  revision: IntFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CouponManyRelationFilter {
  every: CouponWhereInput
  some: CouponWhereInput
  none: CouponWhereInput
}

input BookingOrderByInput {
  id: OrderDirection
  start: OrderDirection
  end: OrderDirection
  timeZone: OrderDirection
  address: OrderDirection
  price: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  name: OrderDirection
  status: OrderDirection
  notes: OrderDirection
  secretNotes: OrderDirection
  revision: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input BookingUpdateInput {
  start: DateTime
  end: DateTime
  timeZone: String
  address: String
  price: Int
  service: ServiceRelateToOneForUpdateInput
  location: LocationRelateToOneForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  employees: UserRelateToManyForUpdateInput
  employee_requests: UserRelateToManyForUpdateInput
  customer: UserRelateToOneForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  email: String
  phone: String
  name: String
  status: String
  details: JSON
  notes: String
  secretNotes: String
  revision: Int
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CouponRelateToManyForUpdateInput {
  disconnect: [CouponWhereUniqueInput!]
  set: [CouponWhereUniqueInput!]
  create: [CouponCreateInput!]
  connect: [CouponWhereUniqueInput!]
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  start: DateTime
  end: DateTime
  timeZone: String
  address: String
  price: Int
  service: ServiceRelateToOneForCreateInput
  location: LocationRelateToOneForCreateInput
  addons: AddonRelateToManyForCreateInput
  employees: UserRelateToManyForCreateInput
  employee_requests: UserRelateToManyForCreateInput
  customer: UserRelateToOneForCreateInput
  coupons: CouponRelateToManyForCreateInput
  email: String
  phone: String
  name: String
  status: String
  details: JSON
  notes: String
  secretNotes: String
  revision: Int
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CouponRelateToManyForCreateInput {
  create: [CouponCreateInput!]
  connect: [CouponWhereUniqueInput!]
}

type Service {
  id: ID!
  name: String
  image: String
  excerpt: String
  description: Service_description_Document
  price: Int
  durationInHours: Decimal
  buisnessHourOpen: String
  buisnessHourClosed: String
  buisnessDays: [Int!]
  status: String
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  employees(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  employeesCount(where: UserWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

type Service_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
  name: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  name: StringFilter
  image: StringFilter
  excerpt: StringFilter
  price: IntNullableFilter
  durationInHours: DecimalFilter
  buisnessHourOpen: StringNullableFilter
  buisnessHourClosed: StringNullableFilter
  status: StringNullableFilter
  addons: AddonManyRelationFilter
  employees: UserManyRelationFilter
  locations: LocationManyRelationFilter
  bookings: BookingManyRelationFilter
  coupons: CouponManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  image: OrderDirection
  excerpt: OrderDirection
  price: OrderDirection
  durationInHours: OrderDirection
  buisnessHourOpen: OrderDirection
  buisnessHourClosed: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input ServiceUpdateInput {
  name: String
  image: String
  excerpt: String
  description: JSON
  price: Int
  durationInHours: Decimal
  buisnessHourOpen: String
  buisnessHourClosed: String
  buisnessDays: [Int!]
  status: String
  addons: AddonRelateToManyForUpdateInput
  employees: UserRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  name: String
  image: String
  excerpt: String
  description: JSON
  price: Int
  durationInHours: Decimal
  buisnessHourOpen: String
  buisnessHourClosed: String
  buisnessDays: [Int!]
  status: String
  addons: AddonRelateToManyForCreateInput
  employees: UserRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  coupons: CouponRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Location {
  id: ID!
  name: String
  address: String
  rooms: Int
  status: String
  notes: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input LocationWhereUniqueInput {
  id: ID
  name: String
  address: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  rooms: IntFilter
  status: StringNullableFilter
  notes: StringFilter
  services: ServiceManyRelationFilter
  bookings: BookingManyRelationFilter
  events: EventManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  rooms: OrderDirection
  status: OrderDirection
  notes: OrderDirection
}

input LocationUpdateInput {
  name: String
  address: String
  rooms: Int
  status: String
  notes: String
  services: ServiceRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  address: String
  rooms: Int
  status: String
  notes: String
  services: ServiceRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Addon {
  id: ID!
  name: String
  slug: String
  image: String
  excerpt: String
  price: Int
  stripeProductId: String
  status: String
  author: User
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  rentals(where: RentalWhereInput! = {}, orderBy: [RentalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RentalWhereUniqueInput): [Rental!]
  rentalsCount(where: RentalWhereInput! = {}): Int
  subscriptionPlans(where: SubscriptionPlanWhereInput! = {}, orderBy: [SubscriptionPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionPlanWhereUniqueInput): [SubscriptionPlan!]
  subscriptionPlansCount(where: SubscriptionPlanWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  subscriptionItems(where: SubscriptionItemWhereInput! = {}, orderBy: [SubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionItemWhereUniqueInput): [SubscriptionItem!]
  subscriptionItemsCount(where: SubscriptionItemWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

input AddonWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input AddonWhereInput {
  AND: [AddonWhereInput!]
  OR: [AddonWhereInput!]
  NOT: [AddonWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  image: StringFilter
  excerpt: StringFilter
  price: IntFilter
  stripeProductId: StringFilter
  status: StringNullableFilter
  author: UserWhereInput
  services: ServiceManyRelationFilter
  products: ProductManyRelationFilter
  rentals: RentalManyRelationFilter
  subscriptionPlans: SubscriptionPlanManyRelationFilter
  bookings: BookingManyRelationFilter
  subscriptionItems: SubscriptionItemManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input AddonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  image: OrderDirection
  excerpt: OrderDirection
  price: OrderDirection
  stripeProductId: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input AddonUpdateInput {
  name: String
  slug: String
  image: String
  excerpt: String
  price: Int
  stripeProductId: String
  status: String
  author: UserRelateToOneForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  rentals: RentalRelateToManyForUpdateInput
  subscriptionPlans: SubscriptionPlanRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  subscriptionItems: SubscriptionItemRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input AddonUpdateArgs {
  where: AddonWhereUniqueInput!
  data: AddonUpdateInput!
}

input AddonCreateInput {
  name: String
  slug: String
  image: String
  excerpt: String
  price: Int
  stripeProductId: String
  status: String
  author: UserRelateToOneForCreateInput
  services: ServiceRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  rentals: RentalRelateToManyForCreateInput
  subscriptionPlans: SubscriptionPlanRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  subscriptionItems: SubscriptionItemRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

type Availability {
  id: ID!
  start: DateTime
  end: DateTime
  durationInHours: Decimal
  employee: User
  type: String
  status: String
  dateCreated: DateTime
  dateModified: DateTime
}

input AvailabilityWhereUniqueInput {
  id: ID
}

input AvailabilityWhereInput {
  AND: [AvailabilityWhereInput!]
  OR: [AvailabilityWhereInput!]
  NOT: [AvailabilityWhereInput!]
  id: IDFilter
  start: DateTimeFilter
  end: DateTimeFilter
  employee: UserWhereInput
  type: StringNullableFilter
  status: StringNullableFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input AvailabilityOrderByInput {
  id: OrderDirection
  start: OrderDirection
  end: OrderDirection
  type: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input AvailabilityUpdateInput {
  start: DateTime
  end: DateTime
  employee: UserRelateToOneForUpdateInput
  type: String
  status: String
  dateCreated: DateTime
  dateModified: DateTime
}

input AvailabilityUpdateArgs {
  where: AvailabilityWhereUniqueInput!
  data: AvailabilityUpdateInput!
}

input AvailabilityCreateInput {
  start: DateTime
  end: DateTime
  employee: UserRelateToOneForCreateInput
  type: String
  status: String
  dateCreated: DateTime
  dateModified: DateTime
}

type SubscriptionPlan {
  id: ID!
  image: String
  author: User
  name: String
  slug: String
  excerpt: String
  description: SubscriptionPlan_description_Document
  status: String
  price: Int
  stripeProductId: String
  stripePriceId: String
  billing_interval: String
  stockMax: Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  items(where: SubscriptionItemWhereInput! = {}, orderBy: [SubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionItemWhereUniqueInput): [SubscriptionItem!]
  itemsCount(where: SubscriptionItemWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

type SubscriptionPlan_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SubscriptionPlanWhereUniqueInput {
  id: ID
  slug: String
}

input SubscriptionPlanWhereInput {
  AND: [SubscriptionPlanWhereInput!]
  OR: [SubscriptionPlanWhereInput!]
  NOT: [SubscriptionPlanWhereInput!]
  id: IDFilter
  image: StringFilter
  author: UserWhereInput
  name: StringFilter
  slug: StringFilter
  excerpt: StringFilter
  status: StringNullableFilter
  price: IntFilter
  stripeProductId: StringFilter
  stripePriceId: StringFilter
  billing_interval: StringNullableFilter
  stockMax: IntFilter
  addons: AddonManyRelationFilter
  coupons: CouponManyRelationFilter
  items: SubscriptionItemManyRelationFilter
  tags: TagManyRelationFilter
  categories: CategoryManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input SubscriptionPlanOrderByInput {
  id: OrderDirection
  image: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  excerpt: OrderDirection
  status: OrderDirection
  price: OrderDirection
  stripeProductId: OrderDirection
  stripePriceId: OrderDirection
  billing_interval: OrderDirection
  stockMax: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input SubscriptionPlanUpdateInput {
  image: String
  author: UserRelateToOneForUpdateInput
  name: String
  slug: String
  excerpt: String
  description: JSON
  status: String
  price: Int
  stripeProductId: String
  stripePriceId: String
  billing_interval: String
  stockMax: Int
  addons: AddonRelateToManyForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  items: SubscriptionItemRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input SubscriptionPlanUpdateArgs {
  where: SubscriptionPlanWhereUniqueInput!
  data: SubscriptionPlanUpdateInput!
}

input SubscriptionPlanCreateInput {
  image: String
  author: UserRelateToOneForCreateInput
  name: String
  slug: String
  excerpt: String
  description: JSON
  status: String
  price: Int
  stripeProductId: String
  stripePriceId: String
  billing_interval: String
  stockMax: Int
  addons: AddonRelateToManyForCreateInput
  coupons: CouponRelateToManyForCreateInput
  items: SubscriptionItemRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

type SubscriptionItem {
  id: ID!
  custom_price: Int
  subscriptionPlan: SubscriptionPlan
  isActive: Boolean
  isDelinquent: Boolean
  status: String
  billing_interval: String
  notes: String
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  user: User
  stripeChargeId: String
  stripeSubscriptionId: String
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

input SubscriptionItemWhereUniqueInput {
  id: ID
}

input SubscriptionItemWhereInput {
  AND: [SubscriptionItemWhereInput!]
  OR: [SubscriptionItemWhereInput!]
  NOT: [SubscriptionItemWhereInput!]
  id: IDFilter
  custom_price: IntNullableFilter
  subscriptionPlan: SubscriptionPlanWhereInput
  isActive: BooleanFilter
  isDelinquent: BooleanFilter
  status: StringNullableFilter
  billing_interval: StringFilter
  notes: StringFilter
  addons: AddonManyRelationFilter
  user: UserWhereInput
  stripeChargeId: StringFilter
  stripeSubscriptionId: StringFilter
  coupons: CouponManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input SubscriptionItemOrderByInput {
  id: OrderDirection
  custom_price: OrderDirection
  isActive: OrderDirection
  isDelinquent: OrderDirection
  status: OrderDirection
  billing_interval: OrderDirection
  notes: OrderDirection
  stripeChargeId: OrderDirection
  stripeSubscriptionId: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input SubscriptionItemUpdateInput {
  custom_price: Int
  subscriptionPlan: SubscriptionPlanRelateToOneForUpdateInput
  isActive: Boolean
  isDelinquent: Boolean
  status: String
  billing_interval: String
  notes: String
  addons: AddonRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  stripeChargeId: String
  stripeSubscriptionId: String
  coupons: CouponRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input SubscriptionPlanRelateToOneForUpdateInput {
  create: SubscriptionPlanCreateInput
  connect: SubscriptionPlanWhereUniqueInput
  disconnect: Boolean
}

input SubscriptionItemUpdateArgs {
  where: SubscriptionItemWhereUniqueInput!
  data: SubscriptionItemUpdateInput!
}

input SubscriptionItemCreateInput {
  custom_price: Int
  subscriptionPlan: SubscriptionPlanRelateToOneForCreateInput
  isActive: Boolean
  isDelinquent: Boolean
  status: String
  billing_interval: String
  notes: String
  addons: AddonRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  stripeChargeId: String
  stripeSubscriptionId: String
  coupons: CouponRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input SubscriptionPlanRelateToOneForCreateInput {
  create: SubscriptionPlanCreateInput
  connect: SubscriptionPlanWhereUniqueInput
}

type Product {
  id: ID!
  image: String
  name: String
  stripeProductId: String
  stripePriceId: String
  slug: String
  excerpt: String
  description: Product_description_Document
  isForSale: Boolean
  isForRent: Boolean
  status: String
  price: Int
  rental_price: Int
  stockCount: Int
  author: User
  orderItems(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  image: StringFilter
  name: StringFilter
  stripeProductId: StringFilter
  stripePriceId: StringFilter
  slug: StringFilter
  excerpt: StringFilter
  isForSale: BooleanFilter
  isForRent: BooleanFilter
  status: StringNullableFilter
  price: IntNullableFilter
  rental_price: IntNullableFilter
  stockCount: IntFilter
  author: UserWhereInput
  orderItems: OrderItemManyRelationFilter
  addons: AddonManyRelationFilter
  coupons: CouponManyRelationFilter
  tags: TagManyRelationFilter
  categories: CategoryManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  image: OrderDirection
  name: OrderDirection
  stripeProductId: OrderDirection
  stripePriceId: OrderDirection
  slug: OrderDirection
  excerpt: OrderDirection
  isForSale: OrderDirection
  isForRent: OrderDirection
  status: OrderDirection
  price: OrderDirection
  rental_price: OrderDirection
  stockCount: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input ProductUpdateInput {
  image: String
  name: String
  stripeProductId: String
  stripePriceId: String
  slug: String
  excerpt: String
  description: JSON
  isForSale: Boolean
  isForRent: Boolean
  status: String
  price: Int
  rental_price: Int
  stockCount: Int
  author: UserRelateToOneForUpdateInput
  orderItems: OrderItemRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  image: String
  name: String
  stripeProductId: String
  stripePriceId: String
  slug: String
  excerpt: String
  description: JSON
  isForSale: Boolean
  isForRent: Boolean
  status: String
  price: Int
  rental_price: Int
  stockCount: Int
  author: UserRelateToOneForCreateInput
  orderItems: OrderItemRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
  coupons: CouponRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type Rental {
  id: ID!
  start: DateTime
  end: DateTime
  summary: String
  durationInHours: Decimal
  location: String
  delivery: Boolean
  price: Int
  email: String
  phone: String
  name: String
  notes: String
  order: Order
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  customer: User
  status: String
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input RentalWhereUniqueInput {
  id: ID
}

input RentalWhereInput {
  AND: [RentalWhereInput!]
  OR: [RentalWhereInput!]
  NOT: [RentalWhereInput!]
  id: IDFilter
  start: DateTimeFilter
  end: DateTimeFilter
  location: StringFilter
  delivery: BooleanFilter
  price: IntFilter
  email: StringFilter
  phone: StringFilter
  name: StringFilter
  notes: StringFilter
  order: OrderWhereInput
  addons: AddonManyRelationFilter
  customer: UserWhereInput
  status: StringNullableFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input RentalOrderByInput {
  id: OrderDirection
  start: OrderDirection
  end: OrderDirection
  location: OrderDirection
  delivery: OrderDirection
  price: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  name: OrderDirection
  notes: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input RentalUpdateInput {
  start: DateTime
  end: DateTime
  location: String
  delivery: Boolean
  price: Int
  email: String
  phone: String
  name: String
  notes: String
  order: OrderRelateToOneForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  customer: UserRelateToOneForUpdateInput
  status: String
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input RentalUpdateArgs {
  where: RentalWhereUniqueInput!
  data: RentalUpdateInput!
}

input RentalCreateInput {
  start: DateTime
  end: DateTime
  location: String
  delivery: Boolean
  price: Int
  email: String
  phone: String
  name: String
  notes: String
  order: OrderRelateToOneForCreateInput
  addons: AddonRelateToManyForCreateInput
  customer: UserRelateToOneForCreateInput
  status: String
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type CartItem {
  id: ID!
  quantity: Int
  type: String
  product: Product
  user: User
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  type: StringFilter
  product: ProductWhereInput
  user: UserWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  type: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  type: String
  product: ProductRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  type: String
  product: ProductRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type OrderItem {
  id: ID!
  name: String
  description: String
  image: String
  type: String
  price: Int
  quantity: Int
  order: Order
  product: Product
  dateCreated: DateTime
  dateModified: DateTime
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  image: StringFilter
  type: StringFilter
  price: IntNullableFilter
  quantity: IntNullableFilter
  order: OrderWhereInput
  product: ProductWhereInput
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  image: OrderDirection
  type: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input OrderItemUpdateInput {
  name: String
  description: String
  image: String
  type: String
  price: Int
  quantity: Int
  order: OrderRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  name: String
  description: String
  image: String
  type: String
  price: Int
  quantity: Int
  order: OrderRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

type Order {
  id: ID!
  label: String
  email: String
  notes: String
  total: Int
  charge: String
  shipping_address: String
  stripeSessionId: String
  status: String
  items(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  rental: Rental
  ticketItems(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketItemsCount(where: TicketWhereInput! = {}): Int
  user: User
  dateCreated: DateTime
  dateModified: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  email: StringFilter
  notes: StringFilter
  total: IntNullableFilter
  charge: StringFilter
  shipping_address: StringFilter
  stripeSessionId: StringFilter
  status: StringNullableFilter
  items: OrderItemManyRelationFilter
  rental: RentalWhereInput
  ticketItems: TicketManyRelationFilter
  user: UserWhereInput
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  email: OrderDirection
  notes: OrderDirection
  total: OrderDirection
  charge: OrderDirection
  shipping_address: OrderDirection
  stripeSessionId: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input OrderUpdateInput {
  email: String
  notes: String
  total: Int
  charge: String
  shipping_address: String
  stripeSessionId: String
  status: String
  items: OrderItemRelateToManyForUpdateInput
  rental: RentalRelateToOneForUpdateInput
  ticketItems: TicketRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input RentalRelateToOneForUpdateInput {
  create: RentalCreateInput
  connect: RentalWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  email: String
  notes: String
  total: Int
  charge: String
  shipping_address: String
  stripeSessionId: String
  status: String
  items: OrderItemRelateToManyForCreateInput
  rental: RentalRelateToOneForCreateInput
  ticketItems: TicketRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input RentalRelateToOneForCreateInput {
  create: RentalCreateInput
  connect: RentalWhereUniqueInput
}

type Coupon {
  id: ID!
  name: String
  stripeId: String
  amount_off: Int
  percent_off: Int
  duration_in_months: Int
  duration: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  subscriptionItems(where: SubscriptionItemWhereInput! = {}, orderBy: [SubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionItemWhereUniqueInput): [SubscriptionItem!]
  subscriptionItemsCount(where: SubscriptionItemWhereInput! = {}): Int
  subscriptionPlans(where: SubscriptionPlanWhereInput! = {}, orderBy: [SubscriptionPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionPlanWhereUniqueInput): [SubscriptionPlan!]
  subscriptionPlansCount(where: SubscriptionPlanWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketsCount(where: TicketWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
}

input CouponWhereUniqueInput {
  id: ID
  name: String
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  NOT: [CouponWhereInput!]
  id: IDFilter
  name: StringFilter
  stripeId: StringFilter
  amount_off: IntNullableFilter
  percent_off: IntNullableFilter
  duration_in_months: IntNullableFilter
  duration: StringFilter
  products: ProductManyRelationFilter
  subscriptionItems: SubscriptionItemManyRelationFilter
  subscriptionPlans: SubscriptionPlanManyRelationFilter
  events: EventManyRelationFilter
  tickets: TicketManyRelationFilter
  bookings: BookingManyRelationFilter
  services: ServiceManyRelationFilter
}

input CouponOrderByInput {
  id: OrderDirection
  name: OrderDirection
  stripeId: OrderDirection
  amount_off: OrderDirection
  percent_off: OrderDirection
  duration_in_months: OrderDirection
  duration: OrderDirection
}

input CouponUpdateInput {
  name: String
  stripeId: String
  amount_off: Int
  percent_off: Int
  duration_in_months: Int
  duration: String
  products: ProductRelateToManyForUpdateInput
  subscriptionItems: SubscriptionItemRelateToManyForUpdateInput
  subscriptionPlans: SubscriptionPlanRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  tickets: TicketRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
}

input CouponUpdateArgs {
  where: CouponWhereUniqueInput!
  data: CouponUpdateInput!
}

input CouponCreateInput {
  name: String
  stripeId: String
  amount_off: Int
  percent_off: Int
  duration_in_months: Int
  duration: String
  products: ProductRelateToManyForCreateInput
  subscriptionItems: SubscriptionItemRelateToManyForCreateInput
  subscriptionPlans: SubscriptionPlanRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  tickets: TicketRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
}

type Page {
  id: ID!
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: Page_content_Document
  author: User
  privateAccess(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  privateAccessCount(where: UserWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  status: StringNullableFilter
  template: StringNullableFilter
  pinned: IntNullableFilter
  excerpt: StringFilter
  featured_image: StringFilter
  featured_video: StringFilter
  author: UserWhereInput
  privateAccess: UserManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  status: OrderDirection
  template: OrderDirection
  pinned: OrderDirection
  excerpt: OrderDirection
  featured_image: OrderDirection
  featured_video: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  privateAccess: UserRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForCreateInput
  privateAccess: UserRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Post {
  id: ID!
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: Post_content_Document
  author: User
  privateAccess(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  privateAccessCount(where: UserWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  status: StringNullableFilter
  template: StringNullableFilter
  pinned: IntNullableFilter
  excerpt: StringFilter
  featured_image: StringFilter
  featured_video: StringFilter
  author: UserWhereInput
  privateAccess: UserManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  status: OrderDirection
  template: OrderDirection
  pinned: OrderDirection
  excerpt: OrderDirection
  featured_image: OrderDirection
  featured_video: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  privateAccess: UserRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForCreateInput
  privateAccess: UserRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Event {
  id: ID!
  typeof: String
  summary: String
  start: DateTime
  end: DateTime
  price: Int
  seats: Int
  image: String
  excerpt: String
  description: Event_description_Document
  status: String
  location: Location
  hosts(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  hostsCount(where: UserWhereInput! = {}): Int
  cohosts(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  cohostsCount(where: UserWhereInput! = {}): Int
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketsCount(where: TicketWhereInput! = {}): Int
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Event_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  summary: StringFilter
  start: DateTimeFilter
  end: DateTimeNullableFilter
  price: IntFilter
  seats: IntFilter
  image: StringFilter
  excerpt: StringFilter
  status: StringNullableFilter
  location: LocationWhereInput
  hosts: UserManyRelationFilter
  cohosts: UserManyRelationFilter
  tickets: TicketManyRelationFilter
  coupons: CouponManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input EventOrderByInput {
  id: OrderDirection
  summary: OrderDirection
  start: OrderDirection
  end: OrderDirection
  price: OrderDirection
  seats: OrderDirection
  image: OrderDirection
  excerpt: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input EventUpdateInput {
  summary: String
  start: DateTime
  end: DateTime
  price: Int
  seats: Int
  image: String
  excerpt: String
  description: JSON
  status: String
  location: LocationRelateToOneForUpdateInput
  hosts: UserRelateToManyForUpdateInput
  cohosts: UserRelateToManyForUpdateInput
  tickets: TicketRelateToManyForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  summary: String
  start: DateTime
  end: DateTime
  price: Int
  seats: Int
  image: String
  excerpt: String
  description: JSON
  status: String
  location: LocationRelateToOneForCreateInput
  hosts: UserRelateToManyForCreateInput
  cohosts: UserRelateToManyForCreateInput
  tickets: TicketRelateToManyForCreateInput
  coupons: CouponRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Ticket {
  id: ID!
  eventSummary: String
  eventStart: DateTime
  qrcode: String
  email: String
  orderCount: String
  cost: Int
  chargeId: String
  status: String
  event: Event
  holder: User
  order: Order
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

input TicketWhereUniqueInput {
  id: ID
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  id: IDFilter
  qrcode: StringFilter
  email: StringFilter
  orderCount: StringFilter
  cost: IntFilter
  chargeId: StringFilter
  status: StringNullableFilter
  event: EventWhereInput
  holder: UserWhereInput
  order: OrderWhereInput
  coupons: CouponManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input TicketOrderByInput {
  id: OrderDirection
  qrcode: OrderDirection
  email: OrderDirection
  orderCount: OrderDirection
  cost: OrderDirection
  chargeId: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input TicketUpdateInput {
  qrcode: String
  email: String
  orderCount: String
  cost: Int
  chargeId: String
  status: String
  event: EventRelateToOneForUpdateInput
  holder: UserRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input TicketUpdateArgs {
  where: TicketWhereUniqueInput!
  data: TicketUpdateInput!
}

input TicketCreateInput {
  qrcode: String
  email: String
  orderCount: String
  cost: Int
  chargeId: String
  status: String
  event: EventRelateToOneForCreateInput
  holder: UserRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  coupons: CouponRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  excerpt: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  subscriptions(where: SubscriptionPlanWhereInput! = {}, orderBy: [SubscriptionPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionPlanWhereUniqueInput): [SubscriptionPlan!]
  subscriptionsCount(where: SubscriptionPlanWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  excerpt: StringFilter
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  addons: AddonManyRelationFilter
  services: ServiceManyRelationFilter
  locations: LocationManyRelationFilter
  products: ProductManyRelationFilter
  subscriptions: SubscriptionPlanManyRelationFilter
  events: EventManyRelationFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  excerpt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  excerpt: String
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  subscriptions: SubscriptionPlanRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  excerpt: String
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  subscriptions: SubscriptionPlanRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  subscriptions(where: SubscriptionPlanWhereInput! = {}, orderBy: [SubscriptionPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionPlanWhereUniqueInput): [SubscriptionPlan!]
  subscriptionsCount(where: SubscriptionPlanWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  addons: AddonManyRelationFilter
  services: ServiceManyRelationFilter
  locations: LocationManyRelationFilter
  products: ProductManyRelationFilter
  subscriptions: SubscriptionPlanManyRelationFilter
  events: EventManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  subscriptions: SubscriptionPlanRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  subscriptions: SubscriptionPlanRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createAnnouncement(data: AnnouncementCreateInput!): Announcement
  createAnnouncements(data: [AnnouncementCreateInput!]!): [Announcement]
  updateAnnouncement(where: AnnouncementWhereUniqueInput!, data: AnnouncementUpdateInput!): Announcement
  updateAnnouncements(data: [AnnouncementUpdateArgs!]!): [Announcement]
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncements(where: [AnnouncementWhereUniqueInput!]!): [Announcement]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(where: BookingWhereUniqueInput!, data: BookingUpdateInput!): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createAddon(data: AddonCreateInput!): Addon
  createAddons(data: [AddonCreateInput!]!): [Addon]
  updateAddon(where: AddonWhereUniqueInput!, data: AddonUpdateInput!): Addon
  updateAddons(data: [AddonUpdateArgs!]!): [Addon]
  deleteAddon(where: AddonWhereUniqueInput!): Addon
  deleteAddons(where: [AddonWhereUniqueInput!]!): [Addon]
  createAvailability(data: AvailabilityCreateInput!): Availability
  createAvailabilities(data: [AvailabilityCreateInput!]!): [Availability]
  updateAvailability(where: AvailabilityWhereUniqueInput!, data: AvailabilityUpdateInput!): Availability
  updateAvailabilities(data: [AvailabilityUpdateArgs!]!): [Availability]
  deleteAvailability(where: AvailabilityWhereUniqueInput!): Availability
  deleteAvailabilities(where: [AvailabilityWhereUniqueInput!]!): [Availability]
  createSubscriptionPlan(data: SubscriptionPlanCreateInput!): SubscriptionPlan
  createSubscriptionPlans(data: [SubscriptionPlanCreateInput!]!): [SubscriptionPlan]
  updateSubscriptionPlan(where: SubscriptionPlanWhereUniqueInput!, data: SubscriptionPlanUpdateInput!): SubscriptionPlan
  updateSubscriptionPlans(data: [SubscriptionPlanUpdateArgs!]!): [SubscriptionPlan]
  deleteSubscriptionPlan(where: SubscriptionPlanWhereUniqueInput!): SubscriptionPlan
  deleteSubscriptionPlans(where: [SubscriptionPlanWhereUniqueInput!]!): [SubscriptionPlan]
  createSubscriptionItem(data: SubscriptionItemCreateInput!): SubscriptionItem
  createSubscriptionItems(data: [SubscriptionItemCreateInput!]!): [SubscriptionItem]
  updateSubscriptionItem(where: SubscriptionItemWhereUniqueInput!, data: SubscriptionItemUpdateInput!): SubscriptionItem
  updateSubscriptionItems(data: [SubscriptionItemUpdateArgs!]!): [SubscriptionItem]
  deleteSubscriptionItem(where: SubscriptionItemWhereUniqueInput!): SubscriptionItem
  deleteSubscriptionItems(where: [SubscriptionItemWhereUniqueInput!]!): [SubscriptionItem]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createRental(data: RentalCreateInput!): Rental
  createRentals(data: [RentalCreateInput!]!): [Rental]
  updateRental(where: RentalWhereUniqueInput!, data: RentalUpdateInput!): Rental
  updateRentals(data: [RentalUpdateArgs!]!): [Rental]
  deleteRental(where: RentalWhereUniqueInput!): Rental
  deleteRentals(where: [RentalWhereUniqueInput!]!): [Rental]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(where: CartItemWhereUniqueInput!, data: CartItemUpdateInput!): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(where: OrderItemWhereUniqueInput!, data: OrderItemUpdateInput!): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createCoupon(data: CouponCreateInput!): Coupon
  createCoupons(data: [CouponCreateInput!]!): [Coupon]
  updateCoupon(where: CouponWhereUniqueInput!, data: CouponUpdateInput!): Coupon
  updateCoupons(data: [CouponUpdateArgs!]!): [Coupon]
  deleteCoupon(where: CouponWhereUniqueInput!): Coupon
  deleteCoupons(where: [CouponWhereUniqueInput!]!): [Coupon]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createTicket(data: TicketCreateInput!): Ticket
  createTickets(data: [TicketCreateInput!]!): [Ticket]
  updateTicket(where: TicketWhereUniqueInput!, data: TicketUpdateInput!): Ticket
  updateTickets(data: [TicketUpdateArgs!]!): [Ticket]
  deleteTicket(where: TicketWhereUniqueInput!): Ticket
  deleteTickets(where: [TicketWhereUniqueInput!]!): [Ticket]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  registerAnAccount(name: String!, email: String!, password: String!, passwordConfirm: String!): User
  passwordRequestLink(email: String!): User
  passwordReset(password: String!, token: String!, email: String!): User
  verifyEmailRequest(email: String!): User
  verifyEmail(token: String!, email: String!): User
  contact(name: String!, customerId: String, email: String!, tel: String!, start: String!, notes: String!): User
  bookAService(serviceId: String!, locationId: String, addonIds: [String], employeeId: String, customerId: String, date: String!, time: String!, timeZone: String!, address: String, name: String, email: String!, phone: String, notes: String, amount_total: Int): Booking
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcements(where: AnnouncementWhereInput! = {}, orderBy: [AnnouncementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnnouncementWhereUniqueInput): [Announcement!]
  announcementsCount(where: AnnouncementWhereInput! = {}): Int
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  addon(where: AddonWhereUniqueInput!): Addon
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  availability(where: AvailabilityWhereUniqueInput!): Availability
  availabilities(where: AvailabilityWhereInput! = {}, orderBy: [AvailabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AvailabilityWhereUniqueInput): [Availability!]
  availabilitiesCount(where: AvailabilityWhereInput! = {}): Int
  subscriptionPlan(where: SubscriptionPlanWhereUniqueInput!): SubscriptionPlan
  subscriptionPlans(where: SubscriptionPlanWhereInput! = {}, orderBy: [SubscriptionPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionPlanWhereUniqueInput): [SubscriptionPlan!]
  subscriptionPlansCount(where: SubscriptionPlanWhereInput! = {}): Int
  subscriptionItem(where: SubscriptionItemWhereUniqueInput!): SubscriptionItem
  subscriptionItems(where: SubscriptionItemWhereInput! = {}, orderBy: [SubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionItemWhereUniqueInput): [SubscriptionItem!]
  subscriptionItemsCount(where: SubscriptionItemWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  rental(where: RentalWhereUniqueInput!): Rental
  rentals(where: RentalWhereInput! = {}, orderBy: [RentalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RentalWhereUniqueInput): [Rental!]
  rentalsCount(where: RentalWhereInput! = {}): Int
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartItemWhereUniqueInput): [CartItem!]
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  coupon(where: CouponWhereUniqueInput!): Coupon
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  ticket(where: TicketWhereUniqueInput!): Ticket
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketsCount(where: TicketWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
