# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  nameLast: String
  authId: String
  image: String
  phone: String
  email: String
  password: String
  url: String
  isActive: Boolean
  stripeCustomerId: String
  dateCreated: DateTime
  dateModified: DateTime
  buisnessHourOpen: String
  buisnessHourClosed: String
  role: Role
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  privatePagesAccess(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  privatePagesAccessCount(where: PageWhereInput! = {}): Int
  privatePostsAccess(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  privatePostsAccessCount(where: PostWhereInput! = {}): Int
  servicesProvided(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesProvidedCount(where: ServiceWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  gigs(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  gigsCount(where: BookingWhereInput! = {}): Int
  gig_requests(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  gig_requestsCount(where: BookingWhereInput! = {}): Int
  availability(where: AvailabilityWhereInput! = {}, orderBy: [AvailabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AvailabilityWhereUniqueInput): [Availability!]
  availabilityCount(where: AvailabilityWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  authId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  nameLast: StringFilter
  authId: StringFilter
  image: StringFilter
  phone: StringFilter
  email: StringFilter
  password: StringFilter
  url: StringFilter
  isActive: BooleanFilter
  stripeCustomerId: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  buisnessHourOpen: StringNullableFilter
  buisnessHourClosed: StringNullableFilter
  role: RoleWhereInput
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  privatePagesAccess: PageManyRelationFilter
  privatePostsAccess: PostManyRelationFilter
  servicesProvided: ServiceManyRelationFilter
  bookings: BookingManyRelationFilter
  gigs: BookingManyRelationFilter
  gig_requests: BookingManyRelationFilter
  availability: AvailabilityManyRelationFilter
  addons: AddonManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input BookingManyRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input AvailabilityManyRelationFilter {
  every: AvailabilityWhereInput
  some: AvailabilityWhereInput
  none: AvailabilityWhereInput
}

input AddonManyRelationFilter {
  every: AddonWhereInput
  some: AddonWhereInput
  none: AddonWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nameLast: OrderDirection
  authId: OrderDirection
  image: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  password: OrderDirection
  url: OrderDirection
  isActive: OrderDirection
  stripeCustomerId: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  buisnessHourOpen: OrderDirection
  buisnessHourClosed: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  nameLast: String
  authId: String
  image: String
  phone: String
  email: String
  password: String
  url: String
  isActive: Boolean
  stripeCustomerId: String
  dateCreated: DateTime
  dateModified: DateTime
  buisnessHourOpen: String
  buisnessHourClosed: String
  role: RoleRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  privatePagesAccess: PageRelateToManyForUpdateInput
  privatePostsAccess: PostRelateToManyForUpdateInput
  servicesProvided: ServiceRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  gigs: BookingRelateToManyForUpdateInput
  gig_requests: BookingRelateToManyForUpdateInput
  availability: AvailabilityRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input BookingRelateToManyForUpdateInput {
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input AvailabilityRelateToManyForUpdateInput {
  disconnect: [AvailabilityWhereUniqueInput!]
  set: [AvailabilityWhereUniqueInput!]
  create: [AvailabilityCreateInput!]
  connect: [AvailabilityWhereUniqueInput!]
}

input AddonRelateToManyForUpdateInput {
  disconnect: [AddonWhereUniqueInput!]
  set: [AddonWhereUniqueInput!]
  create: [AddonCreateInput!]
  connect: [AddonWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  nameLast: String
  authId: String
  image: String
  phone: String
  email: String
  password: String
  url: String
  isActive: Boolean
  stripeCustomerId: String
  dateCreated: DateTime
  dateModified: DateTime
  buisnessHourOpen: String
  buisnessHourClosed: String
  role: RoleRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  privatePagesAccess: PageRelateToManyForCreateInput
  privatePostsAccess: PostRelateToManyForCreateInput
  servicesProvided: ServiceRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  gigs: BookingRelateToManyForCreateInput
  gig_requests: BookingRelateToManyForCreateInput
  availability: AvailabilityRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input BookingRelateToManyForCreateInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input AvailabilityRelateToManyForCreateInput {
  create: [AvailabilityCreateInput!]
  connect: [AvailabilityWhereUniqueInput!]
}

input AddonRelateToManyForCreateInput {
  create: [AddonCreateInput!]
  connect: [AddonWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  label: String
  description: String
  canViewUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManagePages: Boolean
  canManagePosts: Boolean
  canCreatePosts: Boolean
  canManageCategories: Boolean
  canManageTags: Boolean
  canManageAnnouncements: Boolean
  canManageProducts: Boolean
  canViewProducts: Boolean
  canManageAddons: Boolean
  canManageBookings: Boolean
  canManageAvailability: Boolean
  canCreateAvailability: Boolean
  canManageEvents: Boolean
  canManageTickets: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageLocations: Boolean
  canViewPrivateLocations: Boolean
  canManageServices: Boolean
  canManageSubscriptionPlans: Boolean
  canManageSubscriptionItems: Boolean
  canManageCoupons: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
  name: String
  label: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  label: StringFilter
  description: StringFilter
  canViewUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManagePages: BooleanFilter
  canManagePosts: BooleanFilter
  canCreatePosts: BooleanFilter
  canManageCategories: BooleanFilter
  canManageTags: BooleanFilter
  canManageAnnouncements: BooleanFilter
  canManageProducts: BooleanFilter
  canViewProducts: BooleanFilter
  canManageAddons: BooleanFilter
  canManageBookings: BooleanFilter
  canManageAvailability: BooleanFilter
  canCreateAvailability: BooleanFilter
  canManageEvents: BooleanFilter
  canManageTickets: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  canManageLocations: BooleanFilter
  canViewPrivateLocations: BooleanFilter
  canManageServices: BooleanFilter
  canManageSubscriptionPlans: BooleanFilter
  canManageSubscriptionItems: BooleanFilter
  canManageCoupons: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  label: OrderDirection
  description: OrderDirection
  canViewUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManagePages: OrderDirection
  canManagePosts: OrderDirection
  canCreatePosts: OrderDirection
  canManageCategories: OrderDirection
  canManageTags: OrderDirection
  canManageAnnouncements: OrderDirection
  canManageProducts: OrderDirection
  canViewProducts: OrderDirection
  canManageAddons: OrderDirection
  canManageBookings: OrderDirection
  canManageAvailability: OrderDirection
  canCreateAvailability: OrderDirection
  canManageEvents: OrderDirection
  canManageTickets: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
  canManageLocations: OrderDirection
  canViewPrivateLocations: OrderDirection
  canManageServices: OrderDirection
  canManageSubscriptionPlans: OrderDirection
  canManageSubscriptionItems: OrderDirection
  canManageCoupons: OrderDirection
}

input RoleUpdateInput {
  name: String
  label: String
  description: String
  canViewUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManagePages: Boolean
  canManagePosts: Boolean
  canCreatePosts: Boolean
  canManageCategories: Boolean
  canManageTags: Boolean
  canManageAnnouncements: Boolean
  canManageProducts: Boolean
  canViewProducts: Boolean
  canManageAddons: Boolean
  canManageBookings: Boolean
  canManageAvailability: Boolean
  canCreateAvailability: Boolean
  canManageEvents: Boolean
  canManageTickets: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageLocations: Boolean
  canViewPrivateLocations: Boolean
  canManageServices: Boolean
  canManageSubscriptionPlans: Boolean
  canManageSubscriptionItems: Boolean
  canManageCoupons: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  label: String
  description: String
  canViewUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManagePages: Boolean
  canManagePosts: Boolean
  canCreatePosts: Boolean
  canManageCategories: Boolean
  canManageTags: Boolean
  canManageAnnouncements: Boolean
  canManageProducts: Boolean
  canViewProducts: Boolean
  canManageAddons: Boolean
  canManageBookings: Boolean
  canManageAvailability: Boolean
  canCreateAvailability: Boolean
  canManageEvents: Boolean
  canManageTickets: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageLocations: Boolean
  canViewPrivateLocations: Boolean
  canManageServices: Boolean
  canManageSubscriptionPlans: Boolean
  canManageSubscriptionItems: Boolean
  canManageCoupons: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: Post_content_Document
  author: User
  privateAccess(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  privateAccessCount(where: UserWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  status: StringNullableFilter
  template: StringNullableFilter
  pinned: IntNullableFilter
  excerpt: StringFilter
  featured_image: StringFilter
  featured_video: StringFilter
  author: UserWhereInput
  privateAccess: UserManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  status: OrderDirection
  template: OrderDirection
  pinned: OrderDirection
  excerpt: OrderDirection
  featured_image: OrderDirection
  featured_video: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  privateAccess: UserRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForCreateInput
  privateAccess: UserRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Page {
  id: ID!
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: Page_content_Document
  author: User
  privateAccess(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  privateAccessCount(where: UserWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  status: StringNullableFilter
  template: StringNullableFilter
  pinned: IntNullableFilter
  excerpt: StringFilter
  featured_image: StringFilter
  featured_video: StringFilter
  author: UserWhereInput
  privateAccess: UserManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  status: OrderDirection
  template: OrderDirection
  pinned: OrderDirection
  excerpt: OrderDirection
  featured_image: OrderDirection
  featured_video: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  privateAccess: UserRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  template: String
  pinned: Int
  excerpt: String
  featured_image: String
  featured_video: String
  content: JSON
  author: UserRelateToOneForCreateInput
  privateAccess: UserRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
  excerpt: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  excerpt: StringFilter
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  addons: AddonManyRelationFilter
  services: ServiceManyRelationFilter
  locations: LocationManyRelationFilter
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  excerpt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  excerpt: String
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  excerpt: String
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  addons: AddonManyRelationFilter
  services: ServiceManyRelationFilter
  locations: LocationManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  addons: AddonRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
}

type Announcement {
  id: ID!
  link: String
  start: DateTime
  end: DateTime
  colorTheme: String
  type: String
  content: Announcement_content_Document
}

type Announcement_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AnnouncementWhereUniqueInput {
  id: ID
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IDFilter
  link: StringFilter
  start: DateTimeNullableFilter
  end: DateTimeNullableFilter
  colorTheme: StringNullableFilter
  type: StringNullableFilter
}

input AnnouncementOrderByInput {
  id: OrderDirection
  link: OrderDirection
  start: OrderDirection
  end: OrderDirection
  colorTheme: OrderDirection
  type: OrderDirection
}

input AnnouncementUpdateInput {
  link: String
  start: DateTime
  end: DateTime
  colorTheme: String
  type: String
  content: JSON
}

input AnnouncementUpdateArgs {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateInput!
}

input AnnouncementCreateInput {
  link: String
  start: DateTime
  end: DateTime
  colorTheme: String
  type: String
  content: JSON
}

type Booking {
  id: ID!
  typeof: String
  start: DateTime
  end: DateTime
  timeZone: String
  address: String
  summary: String
  durationInHours: Decimal
  price: Int
  service: Service
  location: Location
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  employees(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  employeesCount(where: UserWhereInput! = {}): Int
  employee_requests(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  employee_requestsCount(where: UserWhereInput! = {}): Int
  customer: User
  email: String
  phone: String
  name: String
  status: String
  details: Booking_details_Document
  notes: String
  secretNotes: String
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

scalar Decimal

type Booking_details_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  start: DateTimeFilter
  end: DateTimeFilter
  timeZone: StringFilter
  address: StringFilter
  price: IntFilter
  service: ServiceWhereInput
  location: LocationWhereInput
  addons: AddonManyRelationFilter
  employees: UserManyRelationFilter
  employee_requests: UserManyRelationFilter
  customer: UserWhereInput
  email: StringFilter
  phone: StringFilter
  name: StringFilter
  status: StringNullableFilter
  notes: StringFilter
  secretNotes: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BookingOrderByInput {
  id: OrderDirection
  start: OrderDirection
  end: OrderDirection
  timeZone: OrderDirection
  address: OrderDirection
  price: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  name: OrderDirection
  status: OrderDirection
  notes: OrderDirection
  secretNotes: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input BookingUpdateInput {
  start: DateTime
  end: DateTime
  timeZone: String
  address: String
  price: Int
  service: ServiceRelateToOneForUpdateInput
  location: LocationRelateToOneForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  employees: UserRelateToManyForUpdateInput
  employee_requests: UserRelateToManyForUpdateInput
  customer: UserRelateToOneForUpdateInput
  email: String
  phone: String
  name: String
  status: String
  details: JSON
  notes: String
  secretNotes: String
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  start: DateTime
  end: DateTime
  timeZone: String
  address: String
  price: Int
  service: ServiceRelateToOneForCreateInput
  location: LocationRelateToOneForCreateInput
  addons: AddonRelateToManyForCreateInput
  employees: UserRelateToManyForCreateInput
  employee_requests: UserRelateToManyForCreateInput
  customer: UserRelateToOneForCreateInput
  email: String
  phone: String
  name: String
  status: String
  details: JSON
  notes: String
  secretNotes: String
  dateCreated: DateTime
  dateModified: DateTime
  google: JSON
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

type Location {
  id: ID!
  name: String
  address: String
  rooms: Int
  status: String
  notes: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input LocationWhereUniqueInput {
  id: ID
  name: String
  address: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  rooms: IntFilter
  status: StringNullableFilter
  notes: StringFilter
  services: ServiceManyRelationFilter
  bookings: BookingManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  rooms: OrderDirection
  status: OrderDirection
  notes: OrderDirection
}

input LocationUpdateInput {
  name: String
  address: String
  rooms: Int
  status: String
  notes: String
  services: ServiceRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  address: String
  rooms: Int
  status: String
  notes: String
  services: ServiceRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Availability {
  id: ID!
  start: DateTime
  end: DateTime
  durationInHours: Decimal
  employee: User
  type: String
  status: String
  dateCreated: DateTime
  dateModified: DateTime
}

input AvailabilityWhereUniqueInput {
  id: ID
}

input AvailabilityWhereInput {
  AND: [AvailabilityWhereInput!]
  OR: [AvailabilityWhereInput!]
  NOT: [AvailabilityWhereInput!]
  id: IDFilter
  start: DateTimeFilter
  end: DateTimeFilter
  employee: UserWhereInput
  type: StringNullableFilter
  status: StringNullableFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input AvailabilityOrderByInput {
  id: OrderDirection
  start: OrderDirection
  end: OrderDirection
  type: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input AvailabilityUpdateInput {
  start: DateTime
  end: DateTime
  employee: UserRelateToOneForUpdateInput
  type: String
  status: String
  dateCreated: DateTime
  dateModified: DateTime
}

input AvailabilityUpdateArgs {
  where: AvailabilityWhereUniqueInput!
  data: AvailabilityUpdateInput!
}

input AvailabilityCreateInput {
  start: DateTime
  end: DateTime
  employee: UserRelateToOneForCreateInput
  type: String
  status: String
  dateCreated: DateTime
  dateModified: DateTime
}

type Service {
  id: ID!
  name: String
  image: String
  excerpt: String
  description: Service_description_Document
  price: Int
  durationInHours: Decimal
  buisnessHourOpen: String
  buisnessHourClosed: String
  buisnessDays: [Int!]
  status: String
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  employees(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  employeesCount(where: UserWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

type Service_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
  name: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  name: StringFilter
  image: StringFilter
  excerpt: StringFilter
  price: IntNullableFilter
  durationInHours: DecimalFilter
  buisnessHourOpen: StringNullableFilter
  buisnessHourClosed: StringNullableFilter
  status: StringNullableFilter
  addons: AddonManyRelationFilter
  employees: UserManyRelationFilter
  locations: LocationManyRelationFilter
  bookings: BookingManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  image: OrderDirection
  excerpt: OrderDirection
  price: OrderDirection
  durationInHours: OrderDirection
  buisnessHourOpen: OrderDirection
  buisnessHourClosed: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input ServiceUpdateInput {
  name: String
  image: String
  excerpt: String
  description: JSON
  price: Int
  durationInHours: Decimal
  buisnessHourOpen: String
  buisnessHourClosed: String
  buisnessDays: [Int!]
  status: String
  addons: AddonRelateToManyForUpdateInput
  employees: UserRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  name: String
  image: String
  excerpt: String
  description: JSON
  price: Int
  durationInHours: Decimal
  buisnessHourOpen: String
  buisnessHourClosed: String
  buisnessDays: [Int!]
  status: String
  addons: AddonRelateToManyForCreateInput
  employees: UserRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

type Addon {
  id: ID!
  name: String
  slug: String
  image: String
  excerpt: String
  price: Int
  stripeProductId: String
  status: String
  author: User
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateModified: DateTime
}

input AddonWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input AddonWhereInput {
  AND: [AddonWhereInput!]
  OR: [AddonWhereInput!]
  NOT: [AddonWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  image: StringFilter
  excerpt: StringFilter
  price: IntFilter
  stripeProductId: StringFilter
  status: StringNullableFilter
  author: UserWhereInput
  services: ServiceManyRelationFilter
  bookings: BookingManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input AddonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  image: OrderDirection
  excerpt: OrderDirection
  price: OrderDirection
  stripeProductId: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
}

input AddonUpdateInput {
  name: String
  slug: String
  image: String
  excerpt: String
  price: Int
  stripeProductId: String
  status: String
  author: UserRelateToOneForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateModified: DateTime
}

input AddonUpdateArgs {
  where: AddonWhereUniqueInput!
  data: AddonUpdateInput!
}

input AddonCreateInput {
  name: String
  slug: String
  image: String
  excerpt: String
  price: Int
  stripeProductId: String
  status: String
  author: UserRelateToOneForCreateInput
  services: ServiceRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateModified: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createAnnouncement(data: AnnouncementCreateInput!): Announcement
  createAnnouncements(data: [AnnouncementCreateInput!]!): [Announcement]
  updateAnnouncement(where: AnnouncementWhereUniqueInput!, data: AnnouncementUpdateInput!): Announcement
  updateAnnouncements(data: [AnnouncementUpdateArgs!]!): [Announcement]
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncements(where: [AnnouncementWhereUniqueInput!]!): [Announcement]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(where: BookingWhereUniqueInput!, data: BookingUpdateInput!): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createAvailability(data: AvailabilityCreateInput!): Availability
  createAvailabilities(data: [AvailabilityCreateInput!]!): [Availability]
  updateAvailability(where: AvailabilityWhereUniqueInput!, data: AvailabilityUpdateInput!): Availability
  updateAvailabilities(data: [AvailabilityUpdateArgs!]!): [Availability]
  deleteAvailability(where: AvailabilityWhereUniqueInput!): Availability
  deleteAvailabilities(where: [AvailabilityWhereUniqueInput!]!): [Availability]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createAddon(data: AddonCreateInput!): Addon
  createAddons(data: [AddonCreateInput!]!): [Addon]
  updateAddon(where: AddonWhereUniqueInput!, data: AddonUpdateInput!): Addon
  updateAddons(data: [AddonUpdateArgs!]!): [Addon]
  deleteAddon(where: AddonWhereUniqueInput!): Addon
  deleteAddons(where: [AddonWhereUniqueInput!]!): [Addon]
  endSession: Boolean!
  registerAnAccount(name: String!, email: String!, password: String!, passwordConfirm: String!): User
  passwordRequestLink(email: String!): User
  passwordReset(password: String!, token: String!, email: String!): User
  verifyEmailRequest(email: String!): User
  verifyEmail(token: String!, email: String!): User
  contact(name: String!, customerId: String, email: String!, tel: String!, start: String!, notes: String!): User
  bookAService(serviceId: String!, locationId: String, addonIds: [String], employeeId: String, customerId: String, date: String!, time: String!, timeZone: String!, address: String, name: String, email: String!, phone: String, notes: String, amount_total: Int): Booking
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcements(where: AnnouncementWhereInput! = {}, orderBy: [AnnouncementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnnouncementWhereUniqueInput): [Announcement!]
  announcementsCount(where: AnnouncementWhereInput! = {}): Int
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  availability(where: AvailabilityWhereUniqueInput!): Availability
  availabilities(where: AvailabilityWhereInput! = {}, orderBy: [AvailabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AvailabilityWhereUniqueInput): [Availability!]
  availabilitiesCount(where: AvailabilityWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  addon(where: AddonWhereUniqueInput!): Addon
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
